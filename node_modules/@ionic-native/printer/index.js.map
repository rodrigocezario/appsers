{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/printer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OACnC,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE,MAAM,oBAAoB;AA0CvE;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AASH;IAA6B,2BAAiB;IAA9C;QAA6B,8BAAiB;IAwB9C,CAAC;IAtBC;;;OAGG;IAEH,6BAAW,GAAX,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C;;;;;OAKG;IAEH,uBAAK,GAAL,UAAM,OAA6B,EAAE,OAAsB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjF,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAjBA;QAAC,OAAO,EAAE;;;;8CAAA;IASV;QAAC,OAAO,EAAE;;;;wCAAA;IAvBZ;QAAC,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,oCAAoC;YAC5C,SAAS,EAAE,yBAAyB;YACpC,IAAI,EAAE,sDAAsD;YAC5D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;;eAAA;IA0BF,cAAC;AAAD,CAAC,AAxBD,CAA6B,iBAAiB,GAwB7C","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\ndeclare var cordova: any;\r\n\r\nexport interface PrintOptions {\r\n  /**\r\n   * The name of the print job and the document\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * The network URL of the printer.\r\n   * Only supported on iOS.\r\n   */\r\n  printerId?: string;\r\n\r\n  /**\r\n   * Specifies the duplex mode to use for the print job.\r\n   * Either double-sided (duplex:true) or single-sided (duplex:false).\r\n   * Double-sided by default.\r\n   * Only supported on iOS\r\n   */\r\n  duplex?: boolean;\r\n\r\n  /**\r\n   * The orientation of the printed content, portrait or landscape\r\n   * Portrait by default.\r\n   */\r\n  landscape?: boolean;\r\n\r\n  /**\r\n   * If your application only prints black text, setting this property to true can result in better performance in many cases.\r\n   * False by default.\r\n   */\r\n  grayscale?: boolean;\r\n\r\n  /**\r\n   * The Size and position of the print view\r\n   */\r\n  bounds?: number[] | any;\r\n}\r\n/**\r\n * @name Printer\r\n * @description Prints documents or HTML rendered content\r\n * @usage\r\n * ```typescript\r\n * import { Printer, PrintOptions } from '@ionic-native/printer';\r\n *\r\n * constructor(private printer: Printer) { }\r\n *\r\n * ...\r\n *\r\n * this.printer.isAvailable().then(onSuccess, onError);\r\n *\r\n * let options: PrintOptions = {\r\n *      name: 'MyDocument',\r\n *      printerId: 'printer007',\r\n *      duplex: true,\r\n *      landscape: true,\r\n *      grayscale: true\r\n *    };\r\n *\r\n * this.p.print(content, options).then(onSuccess, onError);\r\n * ```\r\n * @interfaces\r\n * PrintOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'Printer',\r\n  plugin: 'de.appplant.cordova.plugin.printer',\r\n  pluginRef: 'cordova.plugins.printer',\r\n  repo: 'https://github.com/katzer/cordova-plugin-printer.git',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class Printer extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Checks whether to device is capable of printing.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  @Cordova()\r\n  isAvailable(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Sends content to the printer.\r\n   * @param content {string | HTMLElement} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\r\n   * @param options {PrintOptions} optional. The options to pass to the printer\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  print(content: string | HTMLElement, options?: PrintOptions): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}