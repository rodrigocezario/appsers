var db = null;
var usuarioLogin = null;
var app = angular.module('appsers', ['ionic', 'ionic-material', 'ngCordova', 'angular-md5']);

app.run(function ($ionicPlatform, $cordovaSQLite) {
    $ionicPlatform.ready(function () {

        if (window.cordova && window.cordova.plugins.Keyboard) {
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
        }
        if (window.StatusBar) {
            StatusBar.styleDefault();
        }
        if (!ionic.Platform.is("browser")) {
            db = $cordovaSQLite.openDB({name: "db_sers.db", location: 'default'});
        } else {
            db = window.openDatabase("db_sers.db", '1.0', 'db_sers', -1);
        }
        if (db) {
            //$cordovaSQLite.execute(db, "DROP TABLE usuario");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS usuario (id INTEGER PRIMARY KEY, nome TEXT, email TEXT, senha TEXT, tipo INTEGER, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE projeto");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS projeto (id INTEGER PRIMARY KEY, nome TEXT, descricao TEXT, empresa TEXT, responsavel TEXT, compartilhado INTEGER DEFAULT 0, dt_criacao TEXT, dt_finalizado TEXT, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE participantes");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS participantes (id INTEGER PRIMARY KEY, id_projeto INTEGER, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE secoes");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS secoes (id INTEGER PRIMARY KEY, id_projeto INTEGER, proposito TEXT, escopo TEXT, def_acron_abrev TEXT, referencias TEXT, organizacao TEXT, perspectiva TEXT, funcionalidades TEXT, caracteristicas_utilizador TEXT, restricoes TEXT, assuncoes_dependencias TEXT, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE interessados");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS interessados (id INTEGER PRIMARY KEY, id_projeto INTEGER, nome TEXT, papel TEXT, funcao TEXT, email TEXT, telefone TEXT, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE requisito_usuario");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS requisito_usuario (id INTEGER PRIMARY KEY, id_projeto INTEGER, descricao TEXT, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE requisito_usuario_interessados");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS requisito_usuario_interessados (id INTEGER PRIMARY KEY, id_requisito_usuario INTEGER, id_interessado INTEGER)");
            
            //$cordovaSQLite.execute(db, "DROP TABLE padrao_categoria");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS padrao_categoria (id INTEGER PRIMARY KEY, descricao TEXT, tipo INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE padrao");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS padrao (id INTEGER PRIMARY KEY, id_categoria INTEGER, nome TEXT, objetivo TEXT, contexto TEXT, problema TEXT, forcas TEXT)");
            //$cordovaSQLite.execute(db, "DROP TABLE padrao_exemplo");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS padrao_exemplo (id INTEGER PRIMARY KEY, id_padrao INTEGER, resumo TEXT, definicao TEXT)");
            //$cordovaSQLite.execute(db, "DROP TABLE padrao_template");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS padrao_template (id INTEGER PRIMARY KEY, id_padrao INTEGER, resumo TEXT, definicao TEXT)");
            //$cordovaSQLite.execute(db, "DROP TABLE padrao_relacionamento");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS padrao_relacionamento (id INTEGER PRIMARY KEY, id_padrao INTEGER, id_padrao_relacionamento INTEGER)");
            
            //$cordovaSQLite.execute(db, "DROP TABLE requisito_sistema");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS requisito_sistema (id INTEGER PRIMARY KEY, id_padrao INTEGER, tipo INTEGER, resumo TEXT, descricao TEXT, id_usuario INTEGER)");
            //$cordovaSQLite.execute(db, "DROP TABLE requisito_sistema_projeto");
            $cordovaSQLite.execute(db, "CREATE TABLE IF NOT EXISTS requisito_sistema_projeto (id INTEGER PRIMARY KEY, id_requisito_sistema INTEGER, id_requisito_usuario INTEGER, reuso INTEGER, id_projeto INTEGER, id_vinculo INTEGER, importancia INTEGER, urgencia INTEGER, observacao TEXT)");
            
            //$cordovaSQLite.execute(db, "DELETE FROM padrao_categoria;");
            $cordovaSQLite.execute(db, "INSERT INTO padrao_categoria (id, descricao, tipo) SELECT 1 AS id_insert, 'Lógicos de base de dados', 0 WHERE NOT EXISTS(SELECT pc.id FROM padrao_categoria pc WHERE pc.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao_categoria (id, descricao, tipo) SELECT 2 AS id_insert, 'Interfaces externas', 0 WHERE NOT EXISTS(SELECT pc.id FROM padrao_categoria pc WHERE pc.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao_categoria (id, descricao, tipo) SELECT 3 AS id_insert, 'Atributos do sistema', 0 WHERE NOT EXISTS(SELECT pc.id FROM padrao_categoria pc WHERE pc.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao_categoria (id, descricao, tipo) SELECT 4 AS id_insert, 'Funcionais', 1 WHERE NOT EXISTS(SELECT pc.id FROM padrao_categoria pc WHERE pc.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao_categoria (id, descricao, tipo) SELECT 5 AS id_insert, 'Restrições de projeto', 0 WHERE NOT EXISTS(SELECT pc.id FROM padrao_categoria pc WHERE pc.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao_categoria (id, descricao, tipo) SELECT 6 AS id_insert, 'Desempenho', 0 WHERE NOT EXISTS(SELECT pc.id FROM padrao_categoria pc WHERE pc.id = id_insert)");
            
            //$cordovaSQLite.execute(db, "DELETE FROM padrao;");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 1 AS id_insert, 1, 'Tipo de dados', 'Use este padrão para definir como um item atômico de informação em particular (um único campo) para uma determinada finalidade de negócio será representada e/ou exibida. Também utilize este padrão para especificar um tipo padrão de dados a ser exbido (por exemplo, todas as datas).', '<p>Definir um tipo de dado lógico para cada unidade de informação que tem um papel claro e lógico no sistema, tais como código de produto ou tipo de identificação da empresa. Não se preocupe em fazer isso para os itens de informação claros e simples, pois eles não precisam de explicações adicionais, tal como um texto simples.</p><p>Escrever requisitos para tipos de dados lógicos não é essencial, mas é uma boa prática. Promove a consistência entre o sistema, evita repetição, e impede que os desenvolvedores arbitrariamente tomem suas próprias decisões sobre algo que é muito visível aos usuários. A responsabilidade principal sob um requisito de “tipo de dados” é descrever em detalhe a forma da informação que o tipo de dados deve comunicar (por exemplo, seis caracteres alfabéticos ou uma data). Ele também pode indicar a forma como todas as ocorrências deste tipo de dado devem ser exibidos para o usuário.</p> <p>Qualquer tipo de dado definido em um requisito é um tipo de dado lógico, assim, também é necessário defini-lo em termos daquilo que o cliente precisa: a sua finalidade de negócio, o papel que desempenha. Mesmo se dois tipos de dados têm a mesma forma (por exemplo, um código de três caracteres), se servem a propósitos de negócios diferentes, eles ainda são logicamente distintos e devem ser tratados como tal. Não menciona os tipos de dados técnicos (como o usado em bancos de dados ou linguagens de programação): manter a independência da tecnologia, a não ser forçado pelas circunstâncias.</p>', 'Como descrever as características de um determinado tipo de dados necessário em seu sistema?', '<p>Indicar com precisão o que é um determinado tipo de dados comum significa no contexto do atual do sistema.<br />Descrever as características extra um tipo de dados.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 2 AS id_insert, 1, 'Identificação', 'Use este padrão para definir um esquema de atribuição de identificadores únicos para algum tipo de entidade ou para indicar que um item de dados (ou combinação de itens de dados) pode ser usado como um identificador exclusivo.', '<p>Um identificador pode ser adicionado exclusivamente para fins de identificação (como um número de cliente, que, por si só, não nos diz nada de útil sobre um cliente) ou pode ser um pedaço de informação que está presente para identificação (como um e-mail de cliente). Escreva um requisito utilizando o padrão de identificação para cada tipo de ID que você realmente precise, não para os valores que poderiam ser usados como identificadores.</p><p>Os tipos de dados predominantes usados para IDs (ou partes de IDs) são caracteres (strings) e números. Datas e horários do dia vêm em um distante terceiro lugar. Se você tiver a liberdade para escolher a forma mais adequada para um determinado tipo de ID, como proceder? Os principais fatores a serem ponderados são:<br /></p><p><b>Fator 1: Unicidade</b> contendo informações suficientes para escolher a única entidade que se refere.</p><p><b>Fator 2: Possuir significado</b> Fazendo sentido inerente a uma pessoa (por exemplo, nomes), se eles vão ser visíveis para as pessoas (e geralmente são).</p><p><b>Fator 3: Concisão</b> Precisando poucos caracteres ou dígitos possíveis.</p><p><b>Fator 4: Memorizável</b> Ser fácil para uma pessoa se lembrar. O significado e concisão contribuir aqui.</p><p><b>Fator 5: Simplicidade</b> Infligir com poucas partes distintas possíveis.</p><p><b>Fator 6: Quem atribui</b> Uma pessoa ou uma máquina? É mais fácil para uma pessoa conceber um nome e mais fácil para uma máquina atribuir um número.</p><p><b>Fator 7: Conexão com outros IDs </b>Baseando um ID em outro ID já conhecido. Isto é conveniente quando o ID de base é conhecido para o usuário. Por exemplo, os bancos não restringem a seus clientes números de transação, que são únicos no seu sistema. Ao contrário, eles alocam números sequenciais para cada cliente que é único dentro do banco quando agregado ao ID do cliente.</p><p><b>Fator 8: Flexibilidade</b> Ser capaz de lidar com IDs de tipo desconhecido ou vários tipos diferentes. Isso pode ocorrer se devemos acomodar IDs fornecido por um sistema externo ou por vários sistemas externos diferentes.</p>', 'Os tipos de dados predominante utilizado para IDs (ou partes de IDs) são caracteres (strings) e números. Datas e horários do dia vem em terceiro lugar. Como decidir entre as formas disponíveis a mais adequada para um tipo específico de identificação?', '<p>Exclusividade - Contendo informações suficientes para escolher a entidade única que se refere.</p><p>Plenitude no significado - Dar um sentido inerente a uma pessoa (por exemplo, nomes), se vai ser visível para as pessoas (e geralmente são).</p><p>Concisão - Precisando de alguns caracteres ou dígitos possível.</p><p>Memorizável - Ser fácil para uma pessoa se lembrar.</p><p>Simplicidade </p><p>Quem atribui - Uma pessoa ou uma máquina? É mais fácil para uma pessoa a conceber um nome e mais fácil para uma máquina para alocar um número.</p><p>Conexão com outras identificações - Baseando um ID em outra identificação que já é conhecido. </p><p>Flexibilidade - Ser capaz de lidar com as identificações de tipo desconhecido ou vários tipos diferentes. </p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 3 AS id_insert, 1, 'Estrutura de dados', 'Use este padrão para definir um item de dados composto (que inclui várias peças individuais de informação) que ocorre em mais de um lugar ou que contenha muito para definir ordenadamente em um requisito. Este padrão é usado para evitar a repetição (e consequente risco de inconsistência), tanto na especificação de requisitos e incentivar o mesmo na execução.', '<p>Uma estrutura de dados é uma definição lógica de uma coleção de peças de informação. Ela não faz nada por si só. Ela não define armazenamento ou funções. É apenas um bloco de construção que outros requisitos podem se referir. Um requisito de estrutura de dados precisa conter:</p> <ol start=\"1\" type=\"1\"><li><b>Nome,</b> para resumir o que a estrutura de dados representa.</li></ol><ol  start=\"2\" type=\"1\"><li><b>A lista de itens de informação</b>, cada qual é uma descrição textual de uma das seguintes opções:</li></ol> <ol  start=\"2\" type=\"1\"><ol  start=\"1\" type=\"a\"><li><b>Um tipo de dado previamente definido</b>, ou seja, aquele que já foi definido usando um requisito (para a qual o padrão de requisitos de tipo de dados pode ser usado). </li><li><b>A descrição de um tipo de dados</b>, que define o tipo de dados para si mesmo (ver padrões de requisito de tipo de dados). Se ele tiver entre duas ou mais linhas, considere dividi-la para separar o requisito.  </li><li><b>Outra estrutura de dados, </b>ou, referindo-se a um requisito que a define.  </li><li><b>A lista de itens</b>, todos do mesmo tipo, cada um dos quais é um dos tipos anteriores do item.</li></ol></ol><p>A sequencia na qual os itens aparecem na lista não é significativa. Por exemplo, não há nenhuma sugestão de que esta é a sequencia em que eles aparecem em uma tela de entrada de dados. Se você achar que vale a pena declarar isso explicitamente no requisito, ordene os itens de forma que facilite a leitura, com os itens mais importantes primeiro e mantenha junto os itens relacionados.</p><p>Não tente decompor estruturas de dados em partes menores: isso é parte do processo de <i>design</i>. Se você achar que precisa decompor uma estrutura de dados para um requisito próprio com o objetivo de evitar ter de defini-lo mais de uma vez, ou porque a especificação do requisito ficou muito grande, tudo bem, mas faço-o apenas por essas razões.</p>', '<p>Em uma linguagem de programação orientada a objeto, um requisito de uma estrutura de dados sugere a presença de uma classe equivalente.</p><p>Projetistas de banco de dados podem considerar se a estrutura merece o sua próprio tabela de banco de dados. Projetistas de banco de dados também precisa estar ciente de que este padrão permite listar os itens que deverão estar presente em uma estrutura de dados. Tais estruturas devem ser normalizados durante o projeto do banco de dados.</p>', 'Como evitar inconsistência em estrutura de dados, considerando listas de itens de dados que se repetem em diversos pontos?' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 4 AS id_insert, 1, 'Longevidade de dados', 'Use o padrão de requisito de Longevidade de dados para especificar por quanto tempo um certo tipo de informação deve ser mantida ou por quanto tempo ela deve estar disponível com um determinado grau de facilidade.', '<p>Há duas maneiras para abordar requisitos de longevidade de dados: fazer o que o cliente lhe solicitou ou dar uma olhada na sistemática de todo o sistema. Escrever um requisito de longevidade é simples e, geralmente, surge de uma necessidade evidente. Olhando para o sistema como um todo também não é difícil, mas envolve um pouco mais de análise.</p><p>Longevidade de dados tem três variantes distintas. A primeira abrange quanto tempo os dados devem <b>permanecer online</b>, a segunda, o tempo que ele deve ser <b>armazenado em algum lugar</b>, a terceira, quanto tempo ele deve ser <b>armazenado off-line</b>. Neste contexto, <i>online</i> significa armazenado no sistema principal (normalmente em seu banco de dados) e acesso direto a ele, e <i>off-line</i> significa armazenado em algum outro lugar, como em uma fita de <i>backup</i>. Embora estas três variantes pareçam quase idênticas, a primeira e a terceira são muito diferentes na implementação e a segunda é uma mistura das outras duas. Use a terceira opção apenas se você tiver uma necessidade clara para isso, caso contrário use a segunda opção.</p><p>Um requisito que define a longevidade de dados deve especificar:</p><ol start=\"1\" type=\"1\"><li><b>Os dados a que se referem</b>  Pode ser um tipo determinado de dados ou para uma categoria inteira. De qualquer forma, deixe claro ao que o requisito se aplica.</li><li><b>A forma de armazenamento</b> Como devem ser armazenados os dados ou como ele deve ser disponibilizado. Normalmente, deve ser expresso apenas em termos gerais, como “online”. </li><li><b>A duração do tempo de conservação dos dados</b> Depois de quanto tempo é que se torna aceitável remover (ou perder) os dados? \"Indefinidamente\" é uma opção válida. </li><li><b>A data inicial</b> Quando começa a contagem? Quando inicia a medição? É geralmente a partir de uma data associada ao item em si, como a data limite. Para uma transação, pode ser a data em que ocorreu. </li><li><b>A ação a ser tomada no prazo da longevidade</b> Para a opção de <i>online</i>, seja claro sobre o que vai acontecer quando um item de dados atinge o seu limite de tempo. Isso afeta a abordagem de implementação tomada. As opções mais comuns são as seguintes: </li><ol start=\"1\" type=\"a\"><li><b>Pode ser conservada durante mais tempo até não haver mais necessidade</b>. Ou seja, um requisito apenas especifica um mínimo, e é perfeitamente aceitável mantê-lo por mais tempo ou para sempre.  </li><li><b>Pode ser conservados por um período extra</b>, talvez o “fim de um dia em questão” ou o fim do mês. </li><li><b>Uma vez que atinge o seu limite de tempo, deve tornar-se invisível</b> para pelo menos alguns usuários (por exemplo, clientes). E podem ser fisicamente removidos mais tarde. </li><li><b>Deve ser prontamente removidos</b> no prazo. <br /></li></ol></ol><p>Se os dados devem ser copiados em outro lugar antes de removê-lo, use o padrão de requisito arquivamento de dados para especificar a atividade de cópia.</p><p><b>Finalidade</b> Porque queremos manter esta informação para este período de tempo? Longevidade de dados é, por vezes, obrigatória por lei, práticas da indústria ou política da empresa. Cite a fonte e identifique onde pode ser encontrado, na forma descrita no padrão de requisito de aderência ao padrão.</p>', '<span>Requisitos de longevidade dados são muitas vezes necessários para satisfazer as obrigações legais, normas de contabilidade ou outras exigências regulamentares. Por exemplo, uma empresa é normalmente obrigada a manter registros financeiros por um determinado tempo. </span>', '<p>Especificar o tempo de \"vida\" de um determinado dado.</p><p>Descrever a duraça do tempo de conservação dados</p><p>Descrever a ação a ser tomada sobre a conservação de dados.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 5 AS id_insert, 1, 'Arquivamento de dados', '<p>Use o padrão de requisito de Arquivamento de dados para especificar o movimento ou cópia de dados de um local de armazenamento permanente para outro.</p><p>Não use o padrão de requisito de \"Arquivamento de dados\" para especificar requisito de apoio regular à banco de dados, a citar: <i>back-up</i>, restauração e etc.</p>', '<p>Arquivamento é a movimentação ou cópia de um conjunto de dados de um meio de armazenamento permanente para outro. Assim, um “corpo de dados” arquivados pode ser um subconjunto qualquer de dados disponível. No entanto, o <i>backup</i> de um banco de dados inteiro não é considerado arquivamento, sendo este um procedimento rotineiro e obrigatório de contingência para todos os sistemas de banco de dados.</p><p>O arquivamento de dados é comumente utilizado para os seguintes fins (e possivelmente mais de um simultaneamente):<br /></p><ol start=\"1\" type=\"1\"><li><b>Histórico</b>, para criar um registro <i>off-line</i> de dados excluídos por não ser mais necessário no sistema <i>online</i>.</li><li><b>Desempenho</b>, minimizando a quantidade de dados a serem pesquisados ​​e processados, assim, permitindo que os dados sejam duplicados em outro lugar para que o trabalho pesado (processamento) em que uma cópia não afete o desempenho de outro.</li><li><b>Não interferência</b>, para criar uma cópia dos dados que podem ser trabalhados separadamente sem afetar os dados originais.</li><li><b>Segurança</b>, porque é impossível o acesso indevido à informação que não está mais presente.</li></ol><p>Outros fins para arquivamento incluem: </p><ol start=\"5\" type=\"1\"><li><b>Prova da existência</b>, para que possamos provar que certos dados estavam presentes no momento em que uma cópia de arquivo foi feita. </li><li><b>Termo de permissão</b>, se os dados pertencem à outra pessoa ou se a nossa autoridade de utilização acabou. Isso pode ocorrer se os dados estão associados a um produto de terceiros ou pertence a uma empresa e não se tem mais a permissão de utilização do software para processamento desses dados.</li></ol><p>Assim, identificada alguma das necessidades anteriormente citada, um padrão de requisito para arquivamento de dados deve conter o seguinte:<br /></p><ol start=\"1\" type=\"1\"><li><b>Descrição dos dados</b> Qual informação deve ser movida ou copiada? Referir com maior clareza quanto possível os critérios para selecionar os dados. Pode ser limitado (uma única tabela de dados, por exemplo) ou amplo (vários tipos), que pode envolver uma pequena quantidade de dados ou lotes. A natureza e a quantidade de dados para arquivo pode ter uma grande influência sobre a implementação (e tipo de mídia de armazenamento), mas o requisito não precisa se preocupar com isso.</li><li><b>Mover ou copiar?</b> Os dados originais podem ser deixados onde estão ou devem ser removidos? A palavra “mover” implica que os dados originais serão excluídos, mas você pode querer dizer isso explicitamente, para evitar mal-entendidos.</li><li><b>Origem</b> Onde residem originalmente os dados a serem movidos ou copiados? É comum que seja em um banco de dados.</li><li><b>Onde</b> é o destino dos dados a serem movidos ou copiados? Pode ser um meio <i>off-line</i> ou outro banco de dados. <br />Na maioria dos casos, o arquivamento envolve uma origem e um destino, mas pode ser mais complexa. Os dados podem ser divididos e guardados em separado, especialmente se for segregada (como descrito no padrão de requisito múltiplo), por exemplo, para criar uma fita de arquivo para cada empresa em um sistema multiempresa.<br />Por outro lado, os dados de vários lugares poderiam ser carregados em um destino único. Por exemplo, se temos um banco de dados de relatórios consolidados em que são colocados os dados arquivados a partir de vários outros sistemas. Uma situação como esta envolve várias outras complicações, assim, analisem-as de forma adequada e especifique requisitos adicionais conforme o caso.</li><li><b>Frequência</b> Quantas vezes deve ser feito o arquivamento? Isso também pode abranger a um horário do dia, no entanto, procure expressar isso em termos de intenção, ao invés de uma hora específica do dia (por exemplo, no primeiro dia de cada mês, na madrugada quando a atividade do sistema é a mais baixa). Frequências podem variar enormemente, desde uma vez por ano ou a cada segundo, tendo uma enorme influência sobre a natureza da execução. Se o arquivamento for iniciado manualmente, a frequência é apenas um indicativo para auxiliar a elaboração de procedimentos operacionais.</li><li><b>Iniciador</b> O que inicia o processo de arquivamento? Deveria ser executado automaticamente ou apenas quando uma pessoa solicita-lo? Ou não importa?</li><li><b>Propósito </b>Por que os dados estão sendo arquivados? Pode ser porque eles não são mais necessários <i>online</i>, para melhorar o desempenho ou para quaisquer um dos outros motivos citados anteriormente.</li><p>Um item adicional pode ser necessário em circunstâncias raras, mas recomenda-se evitá-lo, se possível:</p><li><b>Formato de arquivo</b> A indicação do formato de arquivo pode ser necessária se você está produzindo arquivos para serem lidos por outro sistema ou para satisfazer algum padrão externo. É possível oferecer diversos formatos de arquivo (talvez “plugáveis”, conforme o padrão de requisito de extensabilidade).</li></ol>', '<p>Como podemos especificar um requisito que trate sobre o arquivamento de dados?</p><p>Como podemos ressaltar as questões técnicas que gostaríamos sobre arquivamento de dados?<br />Arquivamento de dados é muitas vezes negligenciado, tanto nas especificações como nos próprios sistemas, em parte porque não é proeminente visível e em parte porque a maioria de arquivamento não é importante em sistemas novos. Leva tempo para os dados envelhecer. É perfeitamente legítimo (e não prejudicial) que os requisitos relacionados ao arquivamento têm uma prioridade relativamente baixa e não sejam considerados nas versões iniciais de um sistema.</p>', 'Especificar o arquivamento de dados: envolvendo a descrição dos dados a serem movidos ou copiados, local de origem e destino dos dados a serem movidos/copiados, a frequencia que deverá ser adotada, especificando o indicador que informa o inicio do processo, e o objetivo do arquivamento dos dados.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 6 AS id_insert, 2, 'Interface entre sistemas', '<p>Use o padrão de requisitos de Interface entre sistemas para especificar os dados básicos de uma interface entre o sistema a ser especificado e qualquer sistema externo ou componente com o qual ele precisa interagir. </p><p>Não use o padrão de requisitos de Interface entre sistemas para as interfaces de usuário (que você pode tratar as interações do usuário com dispositivos de infra-estruturas e interface de usuário como interfaces entre sistemas, se eles se comportam de forma semelhante a um sistema externo). Além disso, não pode usar este modelo para interações internas entre diferentes partes do sistema, a menos que um sistema externo pode participar dessas interações, em algum momento no futuro (isto é, se ela pode se tornar uma interface externa). </p>', '<p>Uma interface entre sistemas contém o seguinte:<br /></p><ol start=\"1\" type=\"1\"><li><b>Nome da interface</b> Dê a cada interface um nome significativo e conciso, sendo este algo conveniente para as pessoas usarem em discussão. </li><li><b>ID da interface</b> Dê a cada interface um identificador único no âmbito deste sistema para que ele possa ser facilmente referenciado e sem ambiguidades. Uma convenção que funciona bem é usar \"i\" (minúsculo para distingui-lo do numeral 1) seguido por um número sequencial. Quando múltiplas interfaces têm a mesma finalidade, use um número em duas partes, sendo que o primeiro identifica o propósito e o segundo distingue as interfaces (como i1.1, i1.2, ...). </li><li><b>O sistema em cada extremidade</b> É possível que a mesma interface apareça mais de uma vez no diagrama de contexto do sistema. Mas exiba o mesmo ID da interface somente se duas interfaces tiverem a mesma finalidade. Neste caso, explicar as funções executada dos dois sistemas em uma interface, ou citar cada par de sistemas de forma explícita. <br /><br />Também identificar qual dos dois sistemas pode iniciar uma interação; ou se ambos poderão fazê-lo.</li><li><b>Finalidade(s) da interface</b> Descreva a finalidade de cada interface distinta.</li><li><b>Proprietário da interface</b> Qual organização é responsável pela definição da interface? Pode ser projetado de forma cooperativa, mas uma organização deve ser o árbitro final (para evitar mal-entendidos e resolver os impasses). </li><li><b>Norma que defina a interface (se houver)</b> também citar a sua versão explicitamente. Consulte o padrão de requisito “referência a requisito” para obter orientação sobre este elemento: em particular, a localização da norma.</li><li><b>Tecnologia a ser usada para a interface (se aplicável)</b> Se determinada tecnologia deve ser usada para a interface, deve-se descrevê-la. Veja o padrão de requisito de tecnologia para obter mais detalhes.</li></ol>', '<p>Obter um sistema que coopere com o outro pode ser uma tarefa demorada e imprevisível. Desenvolvedores não compreendem o quão difícil será implementar uma interface específica até se depararem com ela. Se estivermos usando uma interface definida por outra pessoa, não podemos fazer exatamente o que queremos ou pode não funcionar como esperamos, estamos dependentes dos proprietários do outro sistema para implementá-lo corretamente. </p><p>Muitas vezes, as especificações de requisito de interface entre sistemas não ocorre, ou não se consegue reconhecer algumas interfaces. Como resultado, interfaces de sistemas podem ser consideradas como elos fracos do sistema, sem apresentar muita visibilidade e não realizando atribuições de recursos adequadas.</p>', '<p>Especificar requisitos que descrevam a troca <span>de</span><span>informações entre sistemas (nome da interface, identificador da interface, descrição de cada extremidade entre os sistemas, objetivo da interface, proprietário da interface, normas que definem a interface, e tecnologia utilizada na interface)</span></p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 7 AS id_insert, 2, 'Interação entre sistemas', 'Use padrão de requisito Interação entre sistemas para especificar um tipo particular de interação para uma interação entre uma interfacedo sistema.', '<p>Para que nossos requisitos abordem determinados tipos de interações entre sistemas, iremos depender do proprietário da interface do sistema com o qual queremos interagir.</p><p>Há quatro situações distintas que podemos encontrar, havendo uma relação direta com as razões para querer especificar tipos individuais de interações, que por sua vez, afeta o quanto devemos especificar:</p><ul type=\"disc\"><li><b>Situação 1: Nós possuímos a interface</b>. É de nossa responsabilidade fazer a interface completa, por isso use os requisitos necessários para impedir que algo possa ser esquecido. Você não precisa se preocupar com as interações secundárias da interface; certas capacidades pode-se afirmar em termos gerais.</li><li><b>Situação 2: Nós não possuímos a interface, mas podemos influenciar a sua concepção.</b> Use os requisitos para identificar e descrever os recursos que gostaríamos de ver na interface. Trate os proprietários de interface como o público-alvo principal para esses requisitos.<br />Considere que cada um desses requisitos está fora de nosso controle, então até que o proprietário interface os aceite, não sabemos se a interface irá satisfazê-lo.</li><li><b>Situação 3: Nós não possuímos a interface e não podemos influenciar a sua concepção, mas sabemos o que ela envolve.</b> Ao invés de forçar todos os leitores da especificação de requisitos a recorrer à especificação de interface para entender o que ela envolve, pode ser útil resumir as interações individuais em requisitos. Nossos requisitos podem capturar a essência da interface para fazer estimativa de esforço de maneira mais fácil, por exemplo. <br />Alternativamente, pode-se escrever um resumo informal da interface ao invés de requisitos formais. (No entanto, ainda deve-se incluí-lo dentro da especificação de requisitos.) Você poderia pedir a um desenvolvedor para estudar a interface e escrever um resumo.</li><li><b>Situação 4: Não somos donos da interface, não podemos influenciar na sua concepção, e não sabemos o que ela envolve.</b> Esta é uma situação de risco, mas isso acontece. Somos obrigados a comprometermos com a construção de uma interface sem saber o que ela envolve. Marcar esta como uma área de preocupação, e fazer tudo que puder para obter as informações necessárias o mais rapidamente possível. Nós não seremos capazes de escrever a interação do tipo de requisitos até que saibamos o que a interface envolve.</li></ul><p>Um requisito de interação entre sistemas deve conter o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Nome do tipo de interação</b> Permite referir a ela.</li><li><b>Nome da interface e ID</b> A interface através da qual ocorre a interação deve ser clara. Ao se referir a uma interface, mencionar o seu ID de interface para evitar mal-entendidos.</li><li><b>Propósito da interação.</b> Descreve o propósito da interação. Deixe claro como ela é iniciada.</li><li><b>As informações a serem passadas</b> Não precisam ser exaustivas. Concentre-se em informações importantes. Se a interação envolve fluxos de informação em ambos os sentidos, você pode escrever o que cada um contém, mas se a especificação do requisito for muito grande (talvez mais de meia página), aconselha-se dividir cada fluxo em um requisito separado.</li></ol>', '<p>Uma interface envolve uma gama de diferentes tipos de interações. Um serviço de pagamento por cartão de crédito pode existir principalmente para permitir ao lojista que um cliente portador de cartão possa realizar o pagamento de sua compra, mas sua interface vai fazer várias outras coisas, como reverter uma transação e verificação do limite de um cartão de crédito. Estes estão ligados às funções das empresas, mas a interface também pode possuir um número de interações mais técnico e de apoio: iniciar uma ligação (e desligá-la); solicitar reenvio de uma mensagem anterior, notificar estado, e assim por diante. Um tipo de interação, para os efeitos deste padrão de requisito, trata da troca de um determinado tipo de informação, que poderia envolver mensagens em ambas as direções. Por exemplo, um pedido e sua correspondente resposta contam como uma interação.</p>', '<p>Especificar um determinado tipo particular de interação entre interface de sistema.</p><p>Descrever o objetivo de uma interação entre sistemas.</p><p>Descrever as informações que são passada entre os sistemas.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 8 AS id_insert, 3, 'Acessibilidade', 'Use o padrão de requisitos de acessibilidade para especificar em que medida o sistema (ou parte dela) deve ser acessível a pessoas com um certo tipo de deficiência ou outras específicas que carecem , ou seja , como ele deve ser conveniente para eles usarem . Esse padrão de exigência tem uma visão tão ampla de \"necessidades específicas\" que alguns se aplicam a todos , e , portanto, abrange os aspectos de usabilidade (facilidade de uso geral ) que são passíveis de ser definido nos requisitos.', '<p>Requisitos de usabilidade costumam descrever características de interface de usuário, como por exemplo, um som atraente. Mas normalmente essas especificações são definidas em termos imprecisos (a citar: interface de usuário “fácil de aprender” ou intuitiva, ter um “fluxo lógico de entrar”, para usar “cores suáveis”, ou fazer o “agrupamento de informação por assunto”), sendo estes sem sentido para os desenvolvedores e testadores. Todos os requisitos de acessibilidade relacionados se aplicam ao software que desenvolvemos, para a tecnologia que usamos, e o mais importante, para produtos de terceiros que oferecem partes de nossa interface de usuário. Se você especificar requisitos para qualquer infraestrutura em que o sistema precise, inclua um requisito (de acordo com o padrão de requisitos aderência ao padrão) que afirme que todos os nossos requisitos de acessibilidade se aplicam a ele também. Podemos também pedir que a tecnologia mais fundamental (especialmente o sistema operacional e navegadores web) ofereça recursos de acessibilidade que ajudem a satisfazer os nossos objetivos de acessibilidade (ou, pelo menos, não torná-los inatingíveis).</p><p>Assim, relacionados à acessibilidade os requisitos podem ser especificados em três níveis:</p><ul type=\"disc\"><li><b>Nível 1:</b><b>Uma lei ou norma que deve ser respeitada</b> Use o padrão de requisito “aderência ao padrão” para isso. É de sua responsabilidade descobrir quais leis se aplica ao seu sistema. Tenha em mente que as leis e regulamentos são passíveis de mudança. <br /></li><li><b>Nível 2: Qual o tipo de necessidade específica do sistema que deve ser satisfeita.</b> Este é o objetivo ou propósito que se busca atingir com o uso deste padrão. Requisitos dos níveis 1 e 3 podem ser abstratos e seus benefícios podem ser mais difíceis de discernir para alguns leitores.</li><li><b>Nível 3: Detalhamento das características do sistema para satisfazer as necessidades específicas</b> Estes são expressos em termos que os desenvolvedores possam facilmente entender e que os testadores podem testar.</li></ul><p>O segundo nível é o detalhamento das implicações do primeiro nível, assim como o terceiro nível é o detalhamento do segundo. Portanto, você pode escrever de maneira informal (ao invés de requisitos).</p><p>Neste sentido, um requisito de acessibilidade deve conter o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Tipo de necessidade específica</b> Cada requisito deve cobrir uma gama de necessidades de um tipo particular, porque é impraticável escrever um requisito para cada possibilidade individualmente. O melhor caminho é escrever um requisito separado para cada classe distinta de requisitos do sistema. Por exemplo, as necessidades de uma pessoa com daltonismo diferem daquelas de alguém com baixa visão, e as necessidades de uma pessoa cega são muito diferentes de ambos. Tendo um requisito abrangendo toda a deficiência visual não é útil para desenvolvedores ou testadores. Entre em detalhes, tanto quanto é preciso para atender ao leque de necessidades específicas claramente.</li><li><b>Que parte(s) do sistema deve ser acessível.</b> É possível definir um requisito de acessibilidade para todo o sistema, no entanto, não é recomendado. É preferível especificar algumas partes do sistema com a necessidade de acessibilidade e outras não, ou atribuir diferentes prioridades para a acessibilidade em diferentes partes.<br /><br />Em um mundo ideal, todas as partes de um sistema seriam totalmente acessíveis desde o início. Mas, na prática, uma empresa com um orçamento limitado pode ser obrigada a fazer acordos. </li><li><b>A extensão do apoio </b>Como deve ser o uso do sistema para uma pessoa com essa necessidade? Como estamos preparados para tornar o sistema mais fácil para eles usarem?</li><li><b>Porcentagem estimada de usuários afetados</b> (se aplicável e conhecido). Isto pode demonstrar para os leitores do requisito de que a acessibilidade não é apenas para um pequeno número de pessoas. Ter esta informação também nos permite determinar quantos se beneficiarão de melhorias nesta área e nos ajuda a concentrarmos em características de maior benefício para a maioria das pessoas.</li><li><b>A cláusula de uma lei ou norma a que este requisito pertence</b> (caso seja relevante).</li></ol><p>Separar a acessibilidade em vários requisitos de nível 2 permite que as áreas com maior impacto sejam priorizadas, se não temos os recursos para fazer todo o sistema totalmente acessível desde o início. Pode parecer duro adiar a acessibilidade para uma classe de usuários (por exemplo, empregados), mas se temos milhares de vezes mais clientes que funcionários que usam o sistema, e a organização não tem recursos para implementar todos os requisitos de acessibilidade de imediato, espera-se maximizar o benefício. Por outro lado, se uma lei diz que o nosso sistema deve ser acessível aos empregados, mas a lei não se aplica aos clientes, nós provavelmente faríamos o inverso. </p>', '<p>Como especificar recursos de acessibilidade em um requisito de sistema?</p>', '<p>Especificar recursos de acessibilidade em sistemas.</p><p>Detalhar características de acessibilidade.</p><p>Especificar recursos de acessibilidade para outros padrões de requisitos.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 9 AS id_insert, 3, 'Escalabilidade', '<p>Use o padrão de requisito escalabilidade para especificar um caminho no qual o sistema deve ser capaz de expandir-se sem dor indevida, geralmente para acomodar o crescimento no volume de negócios. </p><p>Não usar o padrão de requisito de escalabilidade para exigir um determinado nível de desempenho, utilize um dos padrões de desempenho para este requisito. </p>', '<p>De forma geral, sistemas escaláveis podem ser de dois tipos. O primeiro tipo é escalar, e trata da capacidade de espalhar a carga de processamento transversalmente em mais máquinas. O segundo é a ampliação, que preconiza o aumento do poder das máquinas individualmente. Geralmente, os requisitos devem estar preocupados apenas se o sistema pode ser escalado, sem se importar como.</p><p>Neste sentido, um requisito de escalabilidade deve conter o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Tipo de item a ser escalável</b> Qual aspecto do sistema precisa ser escalável? Por exemplo, poderia ser o número de clientes.</li><li><b>Indicativo de alta no volume de negócios</b> Até que ponto o sistema precisa ser escalável? Indicam apenas uma ordem de grandeza: dezenas, centenas, milhares, milhões, ou o que quer que seja. Expressá-la em termos vagos é uma vantagem positiva, porque impede a formação de equipes de desenvolvimento para acomodar um número específico (como se fosse um requisito de desempenho) com o risco de que esse número represente um limite absoluto.<br />Nenhum sistema pode ser escalado sem limite, por isso não usar palavras como “infinito” ou “ilimitado” para descrever o grau de escalabilidade. <br /></li><li><b>Facilidade de expansão</b> O quanto deve ser fácil de expandir o sistema? Em circunstâncias ideais, uma máquina extra, poderia ser adicionada enquanto o sistema está funcionando. Vale a pena? Se for omitido, é razoável supor que a escalabilidade pode ser alcançado por desligar o sistema, adicionando hardware extra, fazendo um pouco de reconfiguração, e começando tudo de novo. </li><li><b>Motivação</b> Por que precisamos deste tipo de escalabilidade? O mais comum é a motivação para atender o crescimento no negócio.</li></ol>', '<p>Como especificar um requisito que trate de observações referentes à escalabilidade?<br />Um requisito de escalabilidade é uma instrução para desenvolvedores para projetar o sistema de tal forma que ele possa crescer em uma determinada direção, sem obstáculos em seu caminho. É um sinal que o sistema não deve ser restrito a qualquer volume de negócios declarado.</p><p>Assim, a escalabilidade é muitas vezes impulsionada por um aumento em um fator único. Em um sistema comercial, é geralmente o número de clientes (ou, mais geralmente, o número de usuários). Raramente há mais fatores, cujo crescimento de forma independente provoca um aumento proporcional da carga no sistema (e, consequentemente, a necessidade de um requisito de escalabilidade em separado). Geralmente um único requisito de escalabilidade é suficiente.</p>', '<p>Descrição de aspectos de escalabilidade, indicando o tipo de item a ser escalável, o indicativo de alta, aspectos de facilidade de expansão e a motivação</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 10 AS id_insert, 3, 'Extensabilidade', 'Use o padrão de requisito de extensabilidade para mandato de um aspecto específico do sistema ser construído para tornar fácil a prorrogar por \"ligar\" software extra. Em especial, usá-lo em situações onde há (ou pode ser no futuro) de várias maneiras diferentes de fazer as coisas e nós queremos ser capazes de adicionar mais sem grandes perturbações.<br /><br />Não usar o padrão de requisito de extensabilidade de alternativas que não podem ser alcançados pela alocação de software extra. Os exemplos mais comuns são as diferenças realizável unicamente pela configuração, incluindo alguns \"múltiplos\"(tais como multi-lingual e multi-moeda ), e as variações que afetam o sistema como um todo, como ser capaz de rodar em vários sistemas operacionais nomeado (você não pode apenas \"plug in\" a capacidade de executar em Unix).', '<p>Um requisito de extensabilidade atua como uma maneira de dizer para os desenvolvedores criarem uma parte específica do sistema de forma flexível, para que possamos estendê-la ou simplesmente encaixar em um software novo sem que, a cada vez, haja a necessidade de renovação da arquitetura. Se você tem uma lista fixa de alternativas que não irá crescer, você não precisa de extensabilidade, mas ainda pode ser uma boa prática aplicá-la, porque extensabilidade promove modularidade: é uma forma sutil de incentivar o bom design em uma área. Em qualquer caso, é temerário supor que algo nunca irá mudar.</p><p>Alguns exemplos típicos de extensabilidade podem ser citados:</p><ul type=\"disc\"><li><b>Métodos disponíveis de pagamento</b>.</li><li><b>Suporte a alguns formatos de arquivo</b>. Considerar cada circunstância em que os arquivos são acessados ​​como uma espécie separada de expansibilidade. Por exemplo, se uma parte de um sistema lê arquivos gráficos e outra parte lê arquivos de texto, é prudente tratá-los separadamente. Também tratar de entrada e de saída distintamente.</li><li><b>Sistemas externos de interface</b> desde que todos desempenhem o mesmo papel.</li><li><b>Tipos de métodos de notificação.</b></li><li><b>Tipos de dispositivos para controlar</b>, por exemplo, impressoras ou terminais EFTPOS.</li><li><b>Suporte a protocolos de comunicação.</b></li><li><b>Permitir algoritmos de criptografia. </b>Não misture tipos fundamentalmente diferentes de criptografia.</li></ul><p>Cabe ressaltar, que extensibilidade é mais importante e valiosa na construção de um produto de software a ser vendido para várias organizações do que no desenvolvimento para uma única organização. Ela torna mais fácil adaptar cada instalação, sem afetar o produto principal.</p><p>Neste sentido, um requisito de extensabilidade necessariamente deve cobrir os seguintes itens:</p><ol start=\"1\" type=\"1\"><li><b>O aspecto do sistema que deve ser extensível</b> que pode ser expresso em termos do tipo de <i>driver</i> para o <i>slot</i> de encaixe.</li><li><b>Facilidade de extensabilidade</b> Quão fácil deve ser a entrada em um novo <i>driver</i>? Normalmente é melhor simplesmente insistir que um novo <i>driver</i> deve ser adicionado sem alterações de software para o núcleo do sistema. Isto é equivalente a ser capaz de ligar um novo dispositivo elétrico na energia da rede principal, sem ter que modificar o soquete para ligá-lo.</li><li><b>Detalhes de configuração</b> Além de seu software, as informações de configuração são necessárias para cada <i>driver</i> para que o sistema saiba que ele está lá, e como chamá-lo. Isso também é uma questão para os desenvolvedores resolverem. Os requisitos precisam apenas se preocupar com qualquer coisa que é visível aos usuários, tais como o nome pelo qual é apresentado a eles.</li></ol><p>Talvez surpreendentemente, os requisitos de extensibilidade tendem a ser extremamente simples. A principal razão é que eles devem ignorar detalhes técnicos. Eles simplesmente precisam afirmar o que queremos; como ele é alcançado é de responsabilidade dos desenvolvedores.</p>', '<p>Como especificar um requisito que trate uma expansão futura.</p>', '<p>Descrever aspectos de extensabilidade do sistema.</p><p>Descrever facilidade de extensibilidade e detalhes de configuração.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 11 AS id_insert, 3, 'Instalabilidade', 'Use o padrão de requisito de instalabilidade para especificar como deve ser fácil de instalar ou atualizar o sistema (ou uma parte do sistema). ', '<p>A importância da boa instalabilidade depende de quantas instalações haverá (locais diferentes e número de máquinas em cada site), em que organizações serão feitas (na sua ou, se for um produto, em um cliente), as habilidades necessárias ao instalador, a complexidade do sistema e o custo no caso de erros. Na instalação muitas vezes é onde ocorre o primeiro contato do cliente com o sistema, sendo assim, caso ocorra algum erro ou realização de procedimentos estranhos, pode frustrar e criar uma impressão negativa sobre o produto, que muitas vezes pode ser difícil de corrigir. Eles podem até desistir e decidir não instalar o sistema.</p><p>Assim, recomenda-se escrever um requisito de instalabilidade para cada parte do sistema que será instalado de forma independente, por exemplo, software de servidor e cliente separadamente.</p><p>Neste sentido, um requisito de instalabilidade deve conter:</p><ol start=\"1\" type=\"1\"><li><b>Que parte do sistema (ou todo ele).</b> Diferentes partes de um sistema pode ser instalado de diferentes maneiras e em tempos diferentes, embora cada parte deva ser instalada de alguma forma (caso contrário não há sentido em tê-lo). Escreva um requisito de instalação de cada unidade instalável, e verifique se cada pedaço de software pertence a uma unidade ou outra.</li><li><b>Quem pode instalar</b> Quem deve ser capaz de instalar esta parte do sistema? Qual a habilidade mínima necessária?</li><li><b>Facilidade de instalação</b> Quão fácil deve ser a instalação do software? Qual o nível de <i>expertise</i>necessária para instalar o software? </li><li><b>Meio de instalação (opcionalmente)</b> Como o produto será disponibilizado? Por exemplo, se o software será baixado, devemos criar um lugar de onde baixá-lo, se nós vamos fornecer o software em CD, devemos preparar CDs de instalação. Evite mencionar determinadas tecnologias de mídia, tanto quanto possível.</li></ol>', '<p>Normalmente você sempre pode contar com os desenvolvedores para realizar a instalação do software, ou que o processo de instalação possa se passar em dois ou três cliques. Assim, o melhor para isso, é: (a) uma pessoa capaz de realizar a instalação; (b) você mesmo realizar a instalação; (c) você não pode permitir erro na instalação; (d) você não quer dar acesso irrestritos as máquinas de produção aos seus desenvolvedores. É aí que entra um requisito de instalabilidade definindo como proceder sem relação a instalação, no sentido de indicar o quão importante é a instalação e quanto estamos preparados, além de funcionar como um lembrete para alocar recursos adequados para isso. </p>', 'Definição de aspectos de instalabilidade, os quais compreendem: quem pode realizar a instalação do sistema; aspectodos sobre as facilidade de instalação.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 12 AS id_insert, 3, 'Disponibilidade', '<p>Use o padrão de requisito de disponibilidade para definir quando o sistema está disponível para os usuários: o sistema de \"horário normal\" (que poderia ser aberto a todas as horas), além de como confiável o sistema (ou uma parte do sistema ) está disponível quando deveria estar. Esse padrão de exigência é escrita para caber sistemas que parecem ter vida própria, tais como sistemas de servidores do tipo que ficam esperando com uma gama de serviços para os utilizadores a invocar sempre que desejar. Não faz sentido para especificar a disponibilidade da mesma forma para aplicações desktop do tipo (como um editor de diagramas) que você iniciar-se quando quiser. </p><p>Esse padrão de requisito não foi escrito para satisfazer as demandas de sistemas críticos para a vida. É normal para os sistemas de negócios, onde o resultado mais desastroso é comercial (financeira ) .</p>', '<p>Especificar requisitos relacionados à disponibilidade é uma tarefa difícil, na verdade, é literalmente impossível. Mas isso não significa que devemos desistir.</p><p>Assim, um requisito para especificar a janela de disponibilidade faz-se necessário relacionar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Grau de disponibilidade normal</b> Os tempos em que o sistema é planejado para estar disponível. Poderia ser “sempre” (24x7), ou uma hora de início e fim de cada dia ou talvez o dia da semana.</li><li><b>Significado para “disponível”</b> o que se entende por disponíveis no contexto deste requisito. Isso não deve ser expresso em termos que dependem de como o sistema é implementado (por exemplo, a disponibilidade de um servidor). Para um sistema típico, disponíveis significa que os usuários são capazes de entrar e realizar quaisquer funções que eles têm acesso. Assumir que um sistema é disponível ou não, é algo muito simples de ser feito.</li><li><b>Qualificador de tempo de indisponibilidade tolerada (opcional)</b> Uma advertência reconhecendo que a disponibilidade não pode ser garantida e descrevendo onde mais detalhes podem ser encontrados sobre a quantidade de tempo de inatividade que seria considerado tolerável.</li></ol>', '<p>É fácil dizer “o sistema deve estar disponível 24x7”, mas mesmo os sistemas mais à prova de bala, à prova de falhas ao longo do tempo podem passar por algum tipo de indisponibilidade. De qualquer forma, 24x7 tornou-se clichê, assim, muitas vezes não pode ser considerado literalmente. Neste caso, existe uma alternativa “o sistema deve estar disponível aos usuários 24 horas por dia, no mínimo 99% do tempo”. No entanto, essa afirmação parece arbitrária, onde é figurado esse percentual de 99%?</p><p>Assim, os seguintes problemas podem ser relacionados:</p><ul type=\"disc\"><li>E se eu sou um desenvolvedor de software, o que devo fazer quando me deparo com esse requisito?</li><li>O que devo fazer se ele disser de forma, por exemplo, 99,9%?</li><li>Se eu sou o gerente de projeto, quanto vai custar para conseguir esse %?</li><li>Se eu sou um testador, como posso testar se o sistema atende a esse requisito?</li><li>Se eu executá-lo por uma semana sem parar, sem incidentes, é bom o suficiente?</li></ul>', 'Definir disponibilidade do sistema para o usuário, observador as medidas normais de disponibilidade, o significado de uma definição de disponíbilidade, e quantificar inatividade tolerada.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 13 AS id_insert, 3, 'Autenticação de Usuário', 'Use o padrão de requisito de autenticação do usuário para especificar que uma pessoa deve fazer a sua identidade conhecido do sistema antes que eles possam acessar qualquer coisa não- públicos ou qualquer coisa que eles não podem permanecer anônimo (em suma , qualquer coisa para a qual eles devem log in).', '<p>A autenticação pode ser considerada como a criação de uma sessão do usuário, que permite o acesso do usuário até que a sessão termine. Isto pode soar como um artifício de implementação, mas não é, e, faz alguns aspectos mais fáceis de serem discutidos (especialmente em alguns requisitos adicionais). Neste sentido, um padrão de requisito de autenticação de usuário deve conter:</p><ol start=\"1\" type=\"1\"><li><b>Classe de usuários</b> Para quais usuários esse requisito se aplica? “Todos os usuários” é uma classe aceitável.</li><li><b>Mecanismos de autenticação</b> Como você espera que os usuários se identifiquem? Você poderia especificar (entrada de um ID de usuário e senha, por exemplo), ou você poderia simplesmente descrever o nível de segurança necessário e deixar os detalhes para equipe de desenvolvimento. Evite falar de tecnologias específicas, tanto quanto possível.<br /> Você também pode manter a função de <i>login</i> para uma classe de usuário separado das outras categorias de usuários. Por exemplo, talvez você não queira que os clientes da internet utilizem a mesma função de login usada ​​pelos funcionários.</li><li><b>Iniciada por</b> Quando é que os usuários precisam se autenticar? Você poderia forçar os usuários a logar em qualquer acesso ou você pode deixá-los passear anonimamente e convidá-los para logar apenas se eles querem fazer algo que o exija. Ambas as abordagens têm o seu lugar, e você pode tratar diferentes classes de usuários de forma diferente. Por exemplo, forçar os funcionários a fazer o <i>login</i> antes de poder fazer qualquer coisa, mas manter os visitantes do site logandos apenas quando quiserem. Considere que saber sobre o usuário o mais cedo possível nos permite gravar suas ações, mas também pode irritar o usuário, assim, solicite a autenticação quando estritamente necessário.</li></ol>', '<p>A autenticação é o processo pelo qual um usuário registrado declara quem ele é e comprova essa informação ao sistema. No entanto, existem três formas aceitas para verificar se uma pessoa é quem diz ser: algo de seu conhecimento (como uma senha), algo que eles têm (como um cartão de identificação), e algo que eles são (usando uma parte do seu corpo que pode ser diferente de todos os outros, como um dedo ou o olho). Dependendo do quão seguro o processo de autenticação deve ser, você pode pedir mais do que um (a senha e um cartão de identificação e impressão digital). Existem vários fatores que afetam o que é melhor em uma situação particular, incluindo:</p><p><b>Fator 1: O dano potencial que poderia causar um impostor.</b> Isso depende do que o usuário tem acesso, não apenas quais as funções, mas também de outros bens (por exemplo, um cliente que tem uma grande soma de dinheiro em sua conta), então você pode querer considerar a autenticação de usuários que possuem maiores quantias (ou valores) mais forte. Considere também possíveis danos indiretos, tais como a reputação da empresa, se o acesso não autorizado se tornou de conhecimento público.</p><p><b>Fator 2: O tipo de dispositivo no qual o usuário se auto-autentica.</b> Pode naturalmente excluir certos tipos de autenticação. </p><p><b>Fator 3: O ambiente do usuário.</b> Quanto é confiável ou não o dispositivo do usuário em virtude do local onde ele reside? É dentro de um escritório da empresa, ou fora dela? Existe a probabilidade de alguém estar olhando por cima do ombro do usuário quando ele realiza sua autenticação? (Note que ao usar um caixa eletrônico, você não digita somente o seu ID de usuário e senha; é necessário também o seu cartão de banco para poder dizer quem você é).</p>', '<p>Descrição dos aspectos envolvendo a autenticação de usuários.</p><p>Descrição dos usuários que aplicam-se em um processo de autenticação.</p><p>Descrição dos mecanismo de autenticação.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 15 AS id_insert, 3, 'Autorização específica', '<p>Use o padrão de requisito de autorização específica para especificar que um conjunto de usuários está autorizado (ou não autorizado) para fazer ou ver certas coisas. </p><p>Não usar o padrão de requisito de autorização específica para especificar que a autorização do usuário deve ser configurável; usar o padrão de requisito \" configurável autorização\" para isso.</p>', '<p>Identifique os limites do que deve ser realmente restringido o acesso e não perca tempo tentando controlar coisas além dos limites. </p><p>Um requisito de “autorização específica” precisa declarar duas coisas: quem e o quê. A lista apresentada na seção “problema” deste padrão cita vários tipos relacionados ao “o  quê”. Para o “quem”, é adequado expressá-los independentemente dos termos utilizados. Não cite nome de usuários específicos (pessoas). Mencione papéis ou cargos, se quiser, mas se você fizer isso, deve-se defini-los dentro do requisito ou em algum outro lugar. Isto é importante, porque se você não fizer isso, os leitores são capazes de interpretá-los de forma diferente. </p><p>No entanto, um padrão de requisito para autorização específica deve observar:</p><ol start=\"1\" type=\"1\"><li><b>Descrição do privilégio </b>(o quê.). Pode ser qualquer coisa a que o acesso pode ser concedido (ou negado), sendo o mais comum o nome de uma função.</li><li><b>Regra de acesso</b> (Quem e em que circunstâncias). Mais comumente, se identifica um tipo de usuário, e em sua forma mais simples, diz que para tais usuários é concedido determinado privilégio. Mas pode-se colocar o que quiser na regra, incluindo condições e outra lógica.</li></ol>', '<p>Como especificar uma declaração de qualquer coisa específica que afeta um determinado conjunto de usuários?</p><p>Estes requisitos podem variar consideravelmente, mas eles geralmente caem em uma das seguintes categorias (ou possivelmente em mais de uma, sendo comum combinações das categorias 2 e 4):</p><p><b>Categoria 1: regra de negação padrão.</b> Para afirmar que nada de valor no sistema é acessível a menos que a permissão seja expressamente concedida.</p><p><b>Categoria 2: Funções</b>. Funções que certas categorias de usuários estão autorizadas a usar. Um requisito pode indicar um nome de uma função individual ou uma classe de funções.</p><p><b>Categoria 3: Ações dentro de funções</b>, por exemplo, um usuário pode ser autorizado a alterar os detalhes, mas não adicionar ou excluir alguma coisa.</p><p><b>Categoria 4: Dados</b> Para restringir o acesso a determinadas informações.</p><p><b>Categoria 5: Limites.</b> Limites nos valores que um usuário tem permissão para trabalhar (por exemplo, valor para um reembolso a um cliente).</p><p><b>Categoria 6: Tempo</b> Para restringir quando certos privilégios podem ser usados (que momentos do dia e/ou dias da semana).</p><p><b>Categoria 7: Ambiente</b> Para aplicar restrições a certos ambientes (como o acesso remoto).</p><p><b>Categoria 8: Força da autenticação.</b> Permite acessos mais amplos para quando o usuário se conectar usando um mecanismo de autenticação forte (como um cartão inteligente) do quando ele se autenticar usando um mecanismo mais fraco (somente senha).</p><p><b>Categoria 9: Transferência</b> Onde uma restrição aplicada em uma situação é transferida para ser aplicada da mesma forma para outra coisa.</p><p><b>Categoria 10: Regras operacionais</b> divisão de responsabilidade (por exemplo, uma mesma pessoa executar e aprovar uma transação).</p><p><b>Categoria 11:</b><b>Cobrir proibições</b> de coisas que ninguém pode ter acesso. Refere-se a funções que estão presentes, mas mesmo assim é uma má prática para uso no dia-a-dia em um sistema comercial (como o acesso irrestrito ao banco de dados ou sistema operacional).</p><p><b>Categoria 12: Cobrir permissões</b> de coisas que todos podem acessar sem restrições. Coisas à disposição do público normalmente não justificam um requisito separado para dizer isso, mas você pode encontrar uma situação que seja necessário.</p>', 'Defini aspectos de autorizações específicas, nas quais compreendem a descrição de previlégios e de regras de acesso.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 16 AS id_insert, 3, 'Autorização configurável', '<p>Use o padrão de requisito Autorização configurável para especificar que a definição de quais os utilizadores podem fazer o que deve ser configurável (isto é, pode ser alterado dinamicamente ). </p><p>Não usar o padrão de requisito autorização configurável para especificar que um conjunto de usuários está autorizada a fazer ou ver , usar o padrão de exigência de autorização específica para isso. </p>', '<p>Autorização configurável é mais frutífera quando usada para controlar o acesso a funções, porque em qualquer sistema sério, as funções são numerosas demais para fixar o seu acesso corretamente durante todo o tempo. Neste sentido, um requisito de autorização configurável deve observar:</p><ol start=\"1\" type=\"1\"><li><b>Classe de usuários. </b>Quais os usuários que podem realizar acesso configurável? Fazê-lo apenas para as classes de usuários que necessitam de flexibilidade. Evitar para as classes de usuários que têm privilégios fixos, que, na maioria dos sistemas, inclui clientes. Se possível, evitar para classes com muitos usuários (mais uma vez, os clientes), devido ao impacto no desempenho.</li><li><b>Natureza do acesso.</b> O acesso é para funções ou para dados, ou uma combinação de ambos? Descrever o que é necessário em detalhes. </li><li><b>Motivação </b>Por que queremos que isso seja configurável?</li></ol>', '<p>Como especificar um requisito que permite controlar o acesso a funções?</p><p>Controlar a “autorização configurável” é maravilhoso: ele permite que você altere quem pode fazer o que, sempre que quiser. Um funcionário precisa de mais autoridade para fazer o seu trabalho corretamente? Não tem problema! A empresa vai ser reestruturada? Pode ser feito! Ao mesmo tempo tem grandes inconvenientes: é difícil e caro de implementar, pode ocasionar perda de desempenho, é demorado para configurar e, posteriormente, para manter. Além disso, podem introduzir riscos de segurança ao sistema.</p>', 'Descreve a especificação de requisitos para autorizações configuráveis (que ocorrem dinâmicamente), as quais compreendem a classe de usuário, a natureza do acesso, e a motivação.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 17 AS id_insert, 4, 'Entidade ativa (cadastros)', '<p>Use o padrão de requisito Entidade ativa para definir um tipo de entidade para a qual a informação é armazenada e que tem uma vida útil (ou seja , é criado , pode ser modificada a qualquer número de vezes e, finalmente terminado) . </p><p>Não usar o padrão de requisitos Entidade ativa para qualquer entidade que é parte da configuração do sistema, usar opadrão de requisito de \"configuração\" em seu lugar.</p>', '<p>Um requisito de entidade ativa é principalmente para definir as informações que precisam ser armazenadas por ela, como os seus detalhes relacionados e identificadores. Assim, um requisito de entidade ativa deve definir pelo menos as seguintes observações:</p><ol start=\"1\" type=\"1\"><li><b>Nome da entidade</b> Deve ser um nome que deixe claro do que se trata a entidade, sendo única e concisa.</li><li><b>Uma explicação da entidade.</b> Deixe claro o que a entidade é, e qual o seu objetivo (e, eventualmente, também do que ela não trata).</li><li><b>As informações que a entidade contém.</b> Apresente na forma de uma estrutura de dados. Normalmente, o próprio requisito define a estrutura de dados, mas pode alternativamente referir-se a outro requisito que o define. Em ambos os casos, a estrutura de dados é descrito no padrão de requisito de estrutura de dados. Este sendo um mapa, que define os atributos ou as colunas de uma tabela do banco de dados.<br/><br/>A definição de cada item de informação também pode conter informações relevantes sobre a entrada, validação, exibição de seu valor, etc. Recomenda-se que cada item de informação que deve observar algum tipo de validação ou  estrutura de dado deva ser relacionado a um requisito que defina tais informações, para isso utilize o padrão de requisito tipo de dados e/ou padrão de requisito estrutura de dados.<br /></li><li><b>Caminho em que uma entidade é identificada exclusivamente.</b> Recomenda-se a utilização de um ou mais identificadores ou qualquer outra forma de identificá-la unicamente. (Estes mais tarde se transformam em índices de uma tabela do banco de dados).</li><li><b>Detalhes da entidade pai</b> (se houver). Uma entidade de um tipo às vezes pode ser criada somente se alguma outra entidade já existe. Um sistema bancário pode requerer que uma conta bancária só pode ser criada se o cliente a que pertence já exista. Descrever a relação com o pai ou os pais, incluindo se é essencial ou facultativo.</li></ol>', '<p>Como especificar o que precisa ser armazenado (campo a campo), bem como os detalhes relacionados, tais como a forma que cada entidade pode ser unicamente identificada (utilizando IDs)?</p>', 'Descrever a definição de uma entidade de dados, na qual compreende: nome da entidade; explicação sobre a entidade, informações que compreendem a entidade; forma(s) na qual a entidade é identificada exclusivamente; e detalhes de relacionamentos.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 18 AS id_insert, 4, 'Transações (operações)', 'Use o padrão de requisitos de transação para definir um tipo de acontecimento na vida de uma entidade ativa , e/ou uma função para a inserção de tal transação.', '<p>As transações são a alma de qualquer sistema comercial. Então, manuseá-las bem é fundamental para o sucesso de um sistema. Exemplos de transações, a citar: a compra de um site de varejo, renovar uma assinatura de revista, fazendo uma oferta bem sucedida em um leilão.<br /><br />Uma transação é uma representação de algo que acontece em um momento no tempo. Para a maioria dos tipos de transações, isso é claro e direto. Um cliente solicita ao banco um saque em dinheiro, que é considerada no momento em que o dinheiro é entregue. Detalhes da transação são considerados e fixados no momento em que isso acontecer. Esta é uma regra importante: os sistemas que quebrá-la terá problemas mais cedo ou mais tarde. Depois que o cliente do banco tenha sacado o seu dinheiro, o banco não pode alterar a quantidade retirada ou considerar que foi pago da conta de outra pessoa: alterar qualquer detalhe da transação seria incorreto. Se um erro genuíno foi feito (como a conta errada do cliente está sendo debitada), a única maneira de corrigi-lo é por meio de uma ou mais operações futuras. Quem iria confiar em um banco que fez o contrário? <br /><br />Visto de uma maneira geral, uma transação complexa pode ter eventos durante sua vida, parecendo um pouco com uma entidade ativa. A maneira mais fácil de distinguir os dois é que uma transação chega ao fim da vida natural (como quando um pedido é cumprido), enquanto uma entidade ativa permanece viva até ser revogada explicitamente (por exemplo, quando um cliente fecha a sua conta).</p><p><br />Assim, um requisito para uma transação precisa definir pelos menos o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Nome da transação</b>. Como ela é denominada.</li><li><b>Uma explicação sobre a transação.</b> Descreva do que se trata a transação e qual a sua finalidade.</li><li><b>A informação que a transação contém.</b> Descreva na forma de uma estrutura de dados. Pode incluir detalhes sobre como determinados valores são inseridos, validados e apresentados. (Veja esta parte do padrão de requisito de entidade ativa, para mais detalhes).</li><li><b>Como uma transação é identificada exclusivamente</b> Isto nos permite distinguir duas transações cujos detalhes poderiam ser idênticos (ou pelo menos difíceis de distingui-los). A maneira mais segura é alocar um ID de transação para cada transação, mesmo que as pessoas raramente tenham necessidade de se referir a eles.</li><li><b>Detalhes do proprietário da entidade ativa.</b> Identifica a entidade que a transação está sendo feita: o cliente que realiza uma compra, a conta bancária da qual o dinheiro está sendo debitada. Assume-se que cada tipo de operação pertence a uma entidade ativa, porque é improvável encontrar uma que não seja. Um tipo de transação poderia ter mais de um proprietário, mas isso é raro.</li><li><b>Quando é considerado que a transação ocorreu.</b> Declare isto em termos de passos na vida da transação. Pode ser quando a transação iniciou, quando é aceita (exemplo, quando uma loja verifica que ele tem em estoque todos os produtos de um pedido), ou o pedido aprovado (por exemplo, manualmente por uma pessoa), ou pode ser ainda o momento a partir do qual não são permitidas alterações. Se esta informação não é indicada no requisito, pode se considerar que acontece imediatamente quando ela é inserida. Mesmo que uma transação tenha etapas separadas como aceitação, aprovação ou outras ações, a o momento da inclusão pode ser considerada como o momento em que ocorreu.</li><li><b>Longevidade da transação</b> (Opcional) Depois de quanto tempo é que a transação pode ser excluída?</li></ol>', '<p>Como especificar um requisito que represente algo que acontece em determinado momento no sistema?</p><p>As transações podem ser complexas. Pode não estar claro o momento em que uma transação acontece e/ou uma transação pode incluir subtransações.</p><p>Por exemplo, um cliente faz um pedido em uma loja virtual. Quando exatamente esta transação acontece? A resposta óbvia é assim que o cliente fechou o pedido. Mas isso não é necessariamente a resposta correta ou a melhor resposta. A loja leva um tempo para verificar a disponibilidade dos produtos. O cliente pode alterar a ordem antes do envio? A loja descobre que um dos produtos não está disponível e é forçado a removê-lo do pedido, o resto do pedido é confirmado. Será que o encerramento acontece agora? A loja despacha os produtos que estão prontos para o transporte e envia o resto mais tarde. Que efeito isso tem?<br /><br /> Na verdade, uma operação complexa (como esta compra loja virtual) envolve subtransações (de mais de um tipo), cada qual acontece em um determinado momento, e após a sua efetivação elas não poderão ser alteradas. Vale a pena construir uma sólida compreensão dos diferentes tipos de subtransação envolvidos em uma transação complexa. Uma questão-chave é decidir quando cada subtransação acontece, porque isto tem uma influência grande sobre quem pode fazer o que até quando.</p>', 'Define os aspectos de operação em uma determinada entidade ativa (normalmente cadastros), no qual compreende o nome da transação, explicação da operação, informação que contém na transação, identificação da transação, detalhes sobre o proprietário da transação, gatilhos para execução da transação, e a longevidade da transação.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 19 AS id_insert, 4, 'Configuração', 'Use o padrão de requisito de configuração para definir os valores dos parâmetros que controlam como o sistema se comporta.', '<p>Um valor de configuração em todo o sistema é aquele para o qual existe apenas uma instância: o mesmo valor é utilizado em todo o sistema; outros valores de configuração têm várias instâncias, sendo que cada um é usado em uma circunstância diferente. Um banco pode definir um limite de retirada em dinheiro diferente para cada moeda, neste caso, a moeda é a entidade de configuração e cada instância de uma moeda tem o seu próprio valor de configuração “limite de retirada”.</p><p>Um valor de configuração pode existir em um dos vários graus de flexibilidade, que funcionam da seguinte forma (do menos para o mais flexível):</p><ol start=\"1\" type=\"1\"><li><b>Codificados</b> Os valores definidos no próprio software devem ser evitados. É uma prática ruim. Cada valor de configuração deve ser modificável, por isso, pode ser definido sem envolver os desenvolvedores. <br />Um valor codificado pode ocasionalmente apresentar um valor errado sem que ninguém (até mesmo o desenvolvedor) perceba. Preste atenção especial para as fórmulas de cálculo. Por exemplo, cálculos de juros bancários variam de uma moeda para outra. (Veja o cálculo no padrão de requisito fórmula para mais detalhes). </li><li><b>Todo o sistema.</b> Para cada valor identificado para todo o sistema, pergunte-se se é realmente um valor único. Às vezes existe uma visão limitada dos parâmetros envolvidos em todo o sistema, quando deveriam, na verdade, e variar por país, por idioma, moeda, tipo de cliente, tipo de conta, empresa, etc.</li><li><b>Em uma entidade de configuração</b>.</li><li><b>Em diversas entidades de configurações</b> Isto inclui sucessivos valores de configuração se o valor não for explicitamente a um nível particular.</li></ol><p>Destacam-se outras considerações especiais quando aplicada a configuração:</p><ol start=\"1\" type=\"1\"> <li><b>Controle de acesso</b> Examine as necessidades de controle de acesso para cada valor de configuração. Não basta supor que uma pessoa importante vai cuidar de toda a configuração, porque é arriscado colocar o controle sobre tudo nas mãos de uma pessoa. (Veja padrões de requisito de autorização para mais detalhes).</li> <li><b>Integridade</b>. A configuração, como todos os dados, é mais bem armazenada em um banco de dados. Armazenar valores de configuração em um arquivo simples pode ser conveniente para os desenvolvedores, mas é perigoso. Considere primeiro o que acontece se você perder o disco que o arquivo está armazenado: que mudanças foram feitas desde o último <i>backup</i>? E segundo, quando é que as mudanças entram em vigor? Se um arquivo de configuração é lido na memória quando o sistema é iniciado, esta será efetivada de imediato? Se não, o que vamos fazer com ela? Todas essas situações são confusas, e a melhor resposta é evitar totalmente o risco: todos os dados de configuração devem ser armazenados em um banco de dados. Se os desenvolvedores realmente querem a flexibilidade que eles têm usando arquivos simples, eles podem optar por armazenar toda configuração “<i>file</i>” como um campo do tipo <i>blob</i> em um banco de dados, mas isso não resolve por si só todas essas complicações.</li></ol><p>Existem duas formas de estruturação de um requisito de configuração:</p><ol start=\"1\" type=\"A\"><li>Definir um <b>valor de configuração</b> e depois descrever o nível (ou níveis) em que ele existe.<br /> Esta forma é preferível simplesmente porque ele concentra sua atenção em um único aspecto da configuração.</li><li>Definir uma <b>entidade de configuração</b>, o todo de que faz parte da configuração.<br />Esta forma é mais conveniente se você tiver vários valores de configuração para especificar no mesmo nível.</li></ol><p>Neste sentido, um requisito de um <b>valor de configuração</b> deve observar:</p><ol start=\"1\" type=\"1\"><li><b>Nome e propósito.</b> É importante esclarecer o uso pretendido do valor de cada configuração, especialmente onde existem vários valores com significados semelhantes. Se os desenvolvedores inadvertidamente usar o valor errado, os erros resultantes podem ser sutis e difíceis de detectar; muitos danos poderiam ocorrer antes que seja resolvido.</li><li><b>Valor representativo</b> Estes valores podem ser utilizados para verificar se os valores de algo foram ou não compreendidos corretamente. Estes valores representativos também podem ser utilizados para configuração inicial do sistema desenvolvido, tanto para uso em ambientes de testes ou produção.</li><li><b>Tipo de dados </b>Cada valor de especificação é descrito conforme no padrão de requisito de tipo de dados ou se referir a um requisito separado que define um tipo de dados.</li><li><b>Nível (s)</b> É “todo o sistema” ou o nome da entidade de configuração a que o valor pertence (por moeda, por tipo de conta, e assim por diante).</li><li><b>Quando o valor pode ser alterado</b>. Anotar as regras para o valor assumido se a requisito não o diz explicitamente.</li></ol><p>Em relação a um requisito de uma <b>entidade de configuração</b> deve-se observar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Nome da entidade</b>.</li><li><b>O objetivo da entidade</b>. O que é isso, para que serve? </li><li><b>Conteúdo da entidade.</b> Escrever na forma de uma estrutura de dados. Pode-se afirmar explicitamente quando cada valor pode ser alterado, se necessário. Um exemplo pode ser dado para cada valor.</li><li><b>Como uma entidade é identificada exclusivamente</b>. Condição do seu ID (ou IDs).</li><li><b>Quando a entidade pode ser alterada.</b> Pode ser feita uma analogia entre uma linha de produção de uma fábrica e um sistema comercial. Qualquer alteração em uma linha de produção pode perturbar o seu fluxo, fazendo-a parar ou quebrar. Em um sistema comercial, o processamento regular das transações e outras atividades diárias podem ser interrompidos por uma alteração feita enquanto é executada a alteração de sua configuração, mesmo sendo uma mudança necessária. Assim, deve-se atribuir a cada valor de configuração o tempo em que ele pode ser alterado, como: em qualquer momento; somente quando o processamento normal é interrompido; e, apenas antes do sistema entrar em operação (alguns valores de configuração são tão sensíveis que só devem ser definidos uma vez e nunca poderão ser modificados novamente. Um exemplo poderia ser a configuração da moeda local).</li></ol><p>Cada valor em uma entidade configurável é considerado como um valor de configuração, e valores configuráveis existe apenas em entidades configuráveis. Assim, nenhum dos valores em qualquer entidade ativa (digamos, um cliente) constitui parte da configuração do sistema.</p>', '<p>Como especificar valores de configuração associados com entidades ativas para todo o sistema?</p>', 'Especificação de uma entidade que observa os valores parâmetros para controlar o comportamento do sistema.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 20 AS id_insert, 4, 'Cronologia (registro de histórico - monitoramento)', '<p>Use o padrão de requisito de Cronologia para especificar que um determinado tipo ou variedade de tipos de evento (ocorrência) na vida do sistema deve ser registrado. </p><p>Não usar o padrão de requisito de Cronologia para  gravar qualquer coisa que tenha um papel financeiro de qualquer espécie; usar o padrão de requisito de \"transação\" para eles. </p>', '<p>Um dicionário define a cronologia como “um registro ou cadastro de eventos em ordem cronológica”. O objetivo é guardar o histórico de qualquer coisa que acontece no dia-a-dia do sistema e possam ser de interesse futuro: como um circuito fechado de câmeras de televisão. Seu principal uso é para investigação, quando algo dá errado, quer se trate de um problema de software, fraudes de funcionários, ataque de <i>hackers</i>, <i>hardware</i> ou outro tipo de falha. Cronologia também pode produzir uma ampla gama de estatísticas com base nos volumes de diferentes tipos de eventos.</p><p>Neste sentido, um requisito de cronologia deve observar:</p><ol start=\"1\" type=\"1\"><li><b>O tipo de ocorrência registrada</b> Um requisito de cronologia pode especificar a gravação de um tipo específico de evento ou a gravação de uma série de tipos de eventos, de maneira que podem ser definidos de forma bastante ampla. Recomenda-se não ser tão específico neste tipo de requisito, para que não haja uma explosão no número de requisitos. O melhor é especificar as classes de eventos, e, se necessário, escreva outro requisito de cronologia para cada tipo específico de evento que deseja gravar.<br /><br />Um sistema não pode gravar o que ele não pode perceber, portanto, gravação de todas as invasões e acessos não autorizados, por exemplo, é impossível.</li><li><b>As informações a serem gravadas sobre cada ocorrência</b> Todas as ocorrências relativas a uma ação do usuário deve incluir o ID do usuário. Cada uma refletindo a mudança de dados permitindo determinar os valores antes e depois (o que não significa, necessariamente, guardar a mudança em si, desde que ambos possam ser obtidos a partir de algum lugar, como a obtenção do valor antes da mudança). Cada um pertencente a uma organização, então se deve identificar essa organização. Cada um pertencente a uma máquina de servidor, então se deve identificar essa máquina.</li><li><b>Gravidade</b> (Opcional). Se a ocorrência indica um problema, a gravidade diz o quanto ela é séria. Para identificar um valor de gravidade deve-se definir em um requisito separado um esquema de gravidade, ou descrevê-lo em termos gerais (para permitir que ele seja mapeado para um nível formal de gravidade quando definidos mais tarde). Se você não diz nada sobre a gravidade, isso significa que você está satisfeito, e que pode ser decidido mais tarde, seja pela equipe de desenvolvimento ou por quem quer que configure o sistema antes de entrar em produção. Se a ocorrência não é claramente um erro, não mencione sua gravidade.</li></ol>', '<p>Como guardar o histórico de qualquer coisa que acontece no dia-a-dia do sistema que possam ser interessante no futuro?</p><p>Como especificar um requisito que defina informações cronológicas?</p>', 'Especificar ocorrência de um determinado tipo de evento que deve ser registrado sobre a vida do sistema.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 21 AS id_insert, 4, 'Consultas', 'Use o padrão de consulta para definir uma função de tela que mostra as informações especificadas para o usuário. A palavra \"consulta\" implica que a informação que está sendo exibido não é modificado por esta função. ', '<p>Especificar um requisito para uma consulta é bastante simples, embora tenha diversos aspectos a serem definidos. No entanto, há a questão de como decidir quais consultas precisamos. Requisitos de consultas são numerosos, por isso é difícil dizer se algo foi esquecido. Uma maneira de ser mais sistemático é começar com os requisitos gerais, exigindo que cada item de informação seja visível em pelo menos uma consulta.</p><p>A maioria das consultas é de informações armazenadas (dados de banco de dados), mas eles também podem ser de informação dinâmica, como sobre o estado do <i>hardware</i> do sistema e componentes de software ou ainda de informações de dispositivos conectados (leitores de cartões, por exemplo ) ou qualquer outra fonte de informação.</p><p>Desta forma, um requisito de consulta deve especificar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Nome da consulta</b>. Dê a cada consulta um nome não ambíguo, para que consultas separadas não se misturem. Procure definir nomes curtos (concisos).</li><li><b>A intenção de negócio da consulta</b>. Se a consulta cumpre um propósito específico ao invés de ser útil para uma variedade de razões. Um exemplo de uma consulta com vários propósitos pode ser uma consulta sobre detalhes de um cliente. A intenção de negócio pode explicar as circunstâncias em que a consulta vai ser usada e por quem, podendo ser mais específico (departamento financeiro) ou geral (qualquer funcionário, clientes). Captar a intenção de uma consulta é mais importante do que os seus detalhes (o próximo item), especialmente se ela permite aos desenvolvedores a oportunidade de construir uma função de consulta que satisfaz mais do que um dos requisitos de consulta.</li><li><b>As informações exibidas</b>. Refere-se aos valores (campos) exibidos para cada entidade. Não especifique a aparência da consulta, apenas o seu conteúdo. Você não precisa descrever sempre cada item de informação. Descrever em termos gerais é preferível (“detalhes” ou “detalhes financeiros”, por exemplo), porque evita o risco de perder alguma coisa. Uma descrição geral também estará correta se os itens forem adicionados mais tarde. Se algum item de informação deve ser calculado na exibição (em tempo de execução), deve-se explicar como. Se algum dos itens de informação estão destacados (especialmente quando estão em algum estado em particular), deve-se explicá-los também. Se os totais e/ou outras informações resumidas devem ser apresentadas em uma lista, recomenda-se especificá-los separadamente para cada item de informações da lista.</li><li><b>Sequencia de classificação</b> (Opcional). Se mais de um item pode ser mostrado, recomenda-se especificar a ordem em que estes devem ser exibidos. Se o usuário pode escolher entre duas ou mais sequencias, o requisito deve dizê-lo. </li><li><b>Critérios de seleção</b> (Opcional). Critérios para seleção podem ser escolhidos pelo usuário, fixos ou uma mistura de ambos. Se o usuário puder controlar quais itens serão mostrados, especificar quais valores pode ser usado como critério de seleção. Para critérios fixos de seleção, descreva o que eles são, e tome cuidado para que a seleção não apareça arbitrária para o usuário ou variando de um pedido para outro. Por exemplo, se a consulta apresenta dados históricos, o usuário pode se confundir se o cumprimento de tempo abrangido nem sempre é o mesmo ou itens aparecem e desaparecem no início ou no final, aparentemente ao acaso.</li><li><b>Navegação</b> (Opcional) Descreva todas as formas em que o usuário pode navegar na consulta ou para outras funções (por exemplo, para detalhar a outras consultas ou invocar uma função de manutenção para editar os dados). Você também pode descrever como estas consultas são invocadas, como os usuários chegam a ela (mas somente se há algo relevante).</li><li><b>Interações</b> (Opcional) Se houver alguma maneira especial em o usuário pode interagir com a consulta, recomenda-se descrevê-la claramente. Especificar apenas as interações necessárias de ser realizada, não descreva aspectos de detalhamento da interface do usuário (botões, <i>hyperlinks</i>, e assim por diante).</li><li><b>Atualização automática</b> (Opcional) Se a consulta é capaz de atualizar os dados que ela exibe (sem que o usuário tenha que solicitá-lo), especifique como tais atualizações devem ser acionadas. Tipicamente, atualizações são acionadas através de tempo (como a cada 30 segundos) ou quando os dados mudam (neste caso, é importante especificar quais dados).</li></ol>', '<p>Como especificar um requisito que trate de consultas?</p>', '<p>Definição de consulta a entidades ativas.</p><p>Definição de aspectos de uma consulta como: exibição das informações, ordenação dos dados, crietérios de seleção, navegação, interações, atualizações dinâmicas das informações exibidas.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 22 AS id_insert, 4, 'Relatório', 'Use o padrão de requisitos de relatório para definir um relatório que mostra as informações especificadas para o usuário. A informação que está sendo exibida não é modificada pelo relatório. ', '<p>Um relatório é uma forma de apresentar informações ao usuário muito parecido com uma consulta. De fato, então devemos começar por explicar a distinção. Uma consulta foi algo que você olhou na tela e um relatório trata de alguma coisa que você imprimiu em papel. Nada mais que isso. No entanto, a rolagem nos permite manipular grandes quantidades de informações na tela, e os relatórios são vistos cada vez mais na tela em vez de serem impressos. Esta é uma tendência que devemos incentivar, para reduzir o uso de papel, o desgaste das impressoras, o tempo de espera para impressão e os riscos de segurança dos documentos de cair nas mãos erradas.</p><p>Quando você precisa mostrar alguma informação a um usuário, deve-se decidir se irá especificá-lo como uma consulta ou como um relatório. Os fatores a considerar são:</p><ul type=\"disc\"><li><b>Fator 1: Quanta informação deve ser mostrada?</b> Se for um único item (tais como detalhes de um cliente), uma consulta é mais adequada, se é uma quantidade ilimitada de informações, um relatório é preferível. Além disso, se você precisa mostrar muitas colunas de informações, um relatório poderia ser melhor.</li><li><b>Fator 2: Deseja interatividade? </b>Os relatórios são passivos (pelo menos usando a tecnologia atual). Se quisermos ser capazes de mudar o que nós estamos olhando ou navegar (clicando sobre itens), devemos usar uma consulta. E se precisar de informações que sejam atualizáveis automaticamente na própria tela, optar por uma consulta é o recomendável.</li><li><b>Fator 3: Quantas vezes você precisa de uma cópia?</b> Se for impresso com frequência opte por um relatório.</li><li><b>Fator 4: Quantas pessoas precisam ver isso?</b> Você pode executar um relatório, enviá-lo para outras pessoas, quando se trata de informações confidenciais, neste caso uma consulta é menos confiável. Você também pode enviar um relatório para alguém que não tem acesso <i>online</i> ao seu sistema.</li><li><b>Fator 5: Você precisa salvar os resultados?</b> Um relatório é mais passível de ser armazenado que uma consulta, no entanto, isso depende em parte da natureza da infraestrutura básica da interface do usuário. (Por exemplo, uma consulta exibida em uma página HTML pode ser salva.).</li><li><b>Fator 6: De onde a informação vem?</b> Se não for de um banco de dados, um software gerador de relatório pode não ser capaz de lê-lo.</li><li><b>Fator 7: O quanto a informação é volátil?</b> Se os dados mudam com frequência, uma cópia de um relatório vai se tornar rapidamente desatualizado, assim, tornando-se obsoleta. </li><li><b>Fator 8: Uma consulta ou um relatório, o que é mais barato de implementar?</b> Normalmente, um relatório é a opção mais barata, isso ocorre porque ele geralmente é um produto gerado por uma ferramenta de design de relatório, o que facilita a criação de um novo relatório.</li></ul><p>Se você receber respostas conflitantes a estas perguntas, considere a especificação tanto de uma consulta quanto de um relatório para a mesma informação.</p><p>Os relatórios necessários para sistemas quase sempre são especificados de forma inadequada, sem considerar os fatores citados anteriormente. A descoberta de funcionalidades (necessidades) que são pertinentes ao sistema é difícil de serem capturadas, então não é surpresa que haja pouco entusiasmo para realização desta tarefa. Com a mudança regular do ponto de vista de negócio, os relatórios de gestão, vendas, <i>marketing</i> e de outras áreas remotas de operações do dia-a-dia, frequentemente tornam-se voláteis. Então, não é possível capturar todos os requisitos de uma única vez. Mas, é recomendável buscar o máximo possível para obter-se uma ideia razoável do número de relatórios necessários. Uma maneira de fazer isto é examinando o seguinte:</p><p><b>As pessoas que possam estar interessadas em receber relatórios: </b>este poderia ser um grupo muito mais amplo que aqueles que realmente usam o sistema: as pessoas do financeiro, auditores, a gestão em todos os níveis, administradores de sistemas, gerentes de projeto (para as estatísticas de erros e de desempenho do sistema) e pessoas do recurso humano. Poderia incluir pessoas de fora da organização, tais como o governo e a indústria, clientes, agentes, fornecedores e outros parceiros de negócios. Pergunte a si mesmo quem pode ter um interesse legítimo em algum aspecto do que se passa no seu sistema.</p><p><b>As atividades necessárias para manter o negócio funcionando:</b> para fins de relatórios, não se preocupe com as atividades tradicionais sobre o dia-a-dia, porque elas nunca podem ser negligenciadas. Preste atenção especial às atividades operacionais que envolvem a tomada de decisões, porque todas estas decisões são baseadas em informações de modo a tentar identificar qual a informação necessária e de que forma seria mais eficaz.</p><p><b>Estratégia envolvida:</b> que tipo de informações estatísticas predominantemente ajudaria as pessoas envolvidas no direcionamento do negócio (principalmente da alta administração, vendas e <i>marketing</i>)? É importante ter uma boa compreensão das expectativas das pessoas neste nível, porque a escala e a complexidade dos relatórios para que elas podem ter um impacto significativo sobre a dimensão global do sistema. Além disso, o processamento necessário para gerar tais relatórios poderia ser tão intenso que ele terá um impacto significativo no desempenho global do sistema; se um sistema de relatórios em separado for necessário para evitar isso, precisamos identificar isso o mais cedo possível e prever as implicações nos requisitos. </p><p>Não é aceitável escrever um requisito que abrange vários relatórios. Algo como \"um conjunto completo de relatórios financeiros\" ou \"todos os relatórios exigidos pelo órgão regulador do governo\" são na melhor das hipóteses uma dica que muita coisa está faltando e são inúteis como requisitos.</p><p>Preste atenção especial às ocasiões em que o relatório é importante (por exemplo, os que devem ser gerados nos fins de meses, trimestres, exercício corrente ou exercícios anteriores). Não cometa o erro de fazer somente os relatórios do dia-a-dia corretamente e negligenciar relatórios frequentes de tarefas. Fique atento ao especificar necessidades “óbvias” de uma forma superficial, isso pode levar a relatórios que são de difícil controle na prática, os quais impõem carga extra de trabalho para os usuários durante suas atividades. Além disso, a tentativa de adicionar esses relatórios pouco antes deles serem necessários pode levar a descoberta de outras omissões subjacente ao sistema que não podem ser corrigidas a tempo.</p>', 'Como especificar um requisito para definir um relatório?', 'Definição dos aspectos sobre relatórios.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 23 AS id_insert, 4, 'Registro de Usuário', 'Use o padrão de requisito de Registro de usuário para especificar como os novos usuários são registrados (criado no sistema), com ênfase em capturar os detalhes através do qual um usuário pode depois ser autenticado (log in).', '<p>Usuários são especiais. Eles são pessoas, que conduzem a maior parte do que acontece em um sistema comercial, por isso é fundamental saber quem é cada usuário para estabelecer um melhor grau de confiança (dependendo do que deverão fazer no sistema). Registro de usuário, então, é mais importante do que apenas uma atividade de manutenção de dados. O principal objetivo do registro do usuário é registrar informações suficientes para facilitar a autenticação de usuário (<i>login</i>).</p><p>Permitir que os usuários efetuem o seu próprio registro é a maneira mais conveniente, mas este tipo de registro deve ser considerado como suspeito (não confiável). Eles poderiam fornecer dados falsos (como mentir sobre sua idade), ou poderiam inserir detalhes sobre outra pessoa (que é, em algumas circunstâncias, uma forma de realizar alguma fraude). Alternativamente, um usuário pode ser registrado por uma pessoa que já é de confiança, que normalmente é realizado quando a pessoa está em posição de atestar a identidade do usuário em potencial (como se estivessem fisicamente presentes). Esta é uma maneira mais confiável (por exemplo, para registrar os novos empregados). O processo de registro pode ser mais complexo: ter alguns detalhes inseridos pelo usuário e alguns por outra pessoa, ou para verificar a veracidade de certas informações fornecidas pelo usuário.</p><p>Neste sentido, um requisito de registro de usuário deve observar:</p><ol start=\"1\" type=\"1\"><li><b>Classe de usuário</b>. Identifica o tipo de usuário que é criado pelo processo de registro descrito pelo requisito. Se todos os usuários são registrados da mesma maneira, mas o sistema trata as diferentes classes de usuários de diferentes maneiras, explicar como a classe de usuário é determinada.</li><li><b>Detalhes do usuário</b>. Quais as informações que se deseja gravar sobre cada usuário? Você pode listar cada item individualmente, ou se referir a uma estrutura de dados (como proposto pelo padrão de requisito de estrutura de dados) ou ambos. Alternativamente, alguns detalhes podem ser definidos como requisitos extras (recuperação de senha, palavra chave, entre outros). Indicar qual a informação é obrigatório e o que é opcional. Nem todas as informações sobre um usuário precisam ser digitadas quando eles se registram: concentrado sobre quais informações o sistema deve ser capaz de lidar, ao invés de sobre quais itens devem ser inseridos durante o registro. É útil dividir esta informação em cinco categorias:</li><ol start=\"1\" type=\"a\"><li><b>Elementos de identificação</b>, como identificação de usuário, nome, endereço e e-mail, coisas usadas para distinguir uma pessoa de outra. Às vezes, outros fatos sobre uma pessoa são usados para auxiliar a identificação (por exemplo, data de nascimento), mas eles devem ser considerados como elementos de identificação somente se eles são essenciais para identificar uma determinada pessoa.</li><li><b>Informações de autenticação</b>, o mais comum é uma senha. Pode ser aumentada por mais informações que é utilizado se o usuário esquece a senha (como uma “frase secreta” ou a algumas perguntas e respostas que é improvável de um impostor conhecer). Esses detalhes indicam que a pessoa que os conhecer é a mesma pessoa que se registrou.<br />Critérios para uma senha aceitável pode-se afirmar aqui, ou eles podem ser objeto de um requisito separado.</li><li><b>Fatos sobre a pessoa</b> (que não são utilizados para identificação), como data de nascimento, título, gênero, endereço e número de telefone.<br />Se você usa um leitor biométrico ao autenticar um usuário, permitir que alguém que é fisicamente incapaz de usar este tipo de leitor possa ser identificado. </li><li><b>Preferências</b>. Definir uma preferência do usuário para cada aspecto de como o sistema se comporta de modo que o usuário possa controlar. Nós não precisamos forçar um usuário a expressar as suas preferências quando se registram, mas é uma boa oportunidade para que o faça.</li><li><b>Privilégios de acesso</b>, que definem o que este usuário tem permissão para ver e fazer. Uma maneira é mencionar que um ou mais “papéis” pode ser atribuído a um usuário. Este assunto é abordado com maior profundidade no requisito de autorização do usuário.</li></ol><li><b>Processo de registro.</b> Pode ser tão simples como a inserção de informações sobre o usuário, ou pode envolver etapas adicionais. Estes últimos são tipicamente para verificar a exatidão do que sabemos sobre esse usuário, incluindo a obtenção de evidências de que o usuário que deseja ser registrado é realmente a pessoa cujos detalhes foram fornecidos. </li></ol><p>Etapas de registro extras geralmente envolvem interação com sistemas externos (como uma agência de referência de crédito) ou atividades manuais (como examinar uma cópia por fax de um documento de identidade). Um passo comumente usado é enviar um e-mail para o endereço de e-mail fornecido pelo usuário e pedir uma resposta, isto apenas prova que essa pessoa recebe o e-mail enviado para aquele endereço. Descreva o que você precisa no seu caso.</p> ', '<p>Como realizar o registro de usuário com informações suficientes para facilitar a sua autenticação (<i>login</i>)?</p>', '<p>Especificar o registro de um novo usuário no sistema.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 24 AS id_insert, 4, 'Taxas', '<p>Use o padrão de requisito Taxa para especificar qualquer taxa ou imposto sobre o sistema deve calcular, relatar ou imposição. Esse padrão de requisito também pode ser usado (apenas com pequenas variações) para especificar um desconto em uma quantidade um partido é cobrado.</p><p>Não use o padrão de requisito Taxa para qualquer taxa ou imposto para que o sistema não contém a informação sobre qual a taxa baseia-se (como os encargos para o trabalho de desenvolvimento de software). Essas taxas podem ser descritos informalmente em uma especificação de requisitos, mas não como requisitos formais do sistema deve satisfazer.</p>', '<p>Uma taxa é qualquer valor que é cobrado a outro por uma convenção ou uso de prestação de algum tipo de serviço. Valor base, como o preço de compra de um item, não é uma taxa. Um imposto é qualquer quantidade ou carga fiscal cobrada por autoridade para um partido (não fornecendo qualquer serviço diretamente em troca!). Este padrão de requisito também deve ser utilizado para especificar impostos, a menos que não seja apropriado. O índice de uma taxa reflete tanto uma quantia monetária fixa como uma porcentagem.<br /><br />Às vezes, as taxas são omitidas na especificação de requisitos no pressuposto de que todas as informações “em estado bruto” estão lá, por isso vai ser fácil para adicioná-las mais tarde. Mas se é fácil, vai ser fácil especificar agora também. Se não é fácil especificar agora, isso é mais um motivo para fazê-lo. Até que você especifique uma taxa, você não sabe como pode ser complicado. Os detalhes podem conter todos os tipos de complexidades, alguns dos quais poderiam ser descobertas somente durante o desenvolvimento.</p><p>Neste sentido, os cinco fatores-chave de qualquer taxa ou imposto são: como, por quê, quando, de quem e para quem. Um requisito de uma taxa ou imposto precisa transmitir a seguinte informação:</p><ol start=\"1\" type=\"1\"><li><b>Nome</b>. Como essa taxa ou imposto é chamado? Precisa ser um nome claro, preciso e inequívoco.</li><li><b>Básico</b>: A natureza do cálculo (como). As bases mais comuns são:</li><ol start=\"1\" type=\"a\"><li>Fixo (por exemplo, preço fixo em R$ 0,20).</li><li>Percentual de algum outro valor monetário (por exemplo, cinco por cento do preço de compra).</li><li>Por período de tempo (por exemplo, R$ 0,50 por mês).<br />Mais tipos de cálculos são possíveis, tais como por faixa: (i) exemplo 1- R$ 0,20 para cada uma das 20 primeiras páginas vistas, R$ 0,15 para cada um dos próximos 20 anos, e R$ 0,10 cada, posteriormente/ (ii) exemplo 2 – transporte até R$ 100,00 é de 15 por cento, entre R$ 100,01 e R$ 200,00 é 10 por cento, e R$ 200,01 sobre ele é gratuito.<br /></li></ol><li><b>Origem</b> O que está sendo cobrado? A taxa é normalmente cobrada, quer por um evento ou ao longo do tempo. Os eventos típicos em que é cobrada uma taxa são:</li><ol start=\"1\" type=\"a\"><li>Uma transação (por exemplo, uma ordem de compra).</li><li>Um acontecimento na vida de uma entidade ativa (por exemplo, o registro de um novo cliente).</li><li>Uma ação dentro do sistema (por exemplo, a execução de um relatório).</li></ol></ol><p>Cobranças normalmente são aplicadas a uma entidade ativa, em qualquer momento de sua vida (por exemplo, uma taxa anual para um cartão de crédito) ou através de uma entidade criada apenas para esta finalidade (como a assinatura de um cliente para uma revista, que continua durante o tempo que o cliente paga a taxa).<br /><br />Quando várias taxas diferentes são aplicadas sobre a mesma coisa, deixar claro a ordem na qual elas são aplicadas.</p><ol start=\"4\" type=\"1\"><li><b>Condição</b> (se relevante) essa taxa é cobrada sempre ou apenas em certas circunstâncias? Por exemplo, um banco pode cobrar por extratos de conta somente se a conta está negativa ou pode cobrar imposto sobre as vendas apenas para os residentes. Descrever as condições em que a taxa se aplica.<br /><br /></li><li><b>Quando cobrado</b> Descrever em que momento a taxa é cobrada do contribuinte. Isto é, quer quando são debitadas de fato ou quando elas são enviadas para pagar. Note-se que valores não são creditados imediatamente quando o devedor paga (por exemplo, os impostos recolhidos poderão ser pagos trimestralmente).<br /><br /></li><li><b>Pagador</b> Quem paga a taxa? Na maioria dos casos o devedor e/ou receptor são evidentes e podem ser omitidos. Perguntar-se de quem e para quem vai o dinheiro? Se a resposta for “depende”, indicar a resposta de forma explícita.<br /><br /></li><li><b>Receptor</b> quem recebe o pagamento? Em alguns casos, uma taxa pode ser compartilhada entre mais de um receptor, por exemplo, quando parte de uma comissão é paga a título de comissão a um agente. Situações como esta podem ser tratadas como duas taxas.<br /><br /></li><li><b>Determinantes do índice da taxa.</b> O que determina o índice da taxa? Muitas vezes o índice da taxa é sempre o mesmo utilizado (embora até então ele possa mudar periodicamente). Mas outros fatores podem entrar em jogo, como, onde o devedor ou receptor reside (geograficamente, como as despesas de envio, dependendo do país), ou quem o devedor e/ou receptor é (ou seja, preços especiais para um grupo específico ou uma combinação específica das partes), a moeda utilizada ou do tipo de uma transação.<br />Se isso não for indicado, os desenvolvedores devem assumir que a taxa tem um valor global do sistema configurável (isto é, a taxa utilizada é a mesma em todos os casos).<br /><br /></li><li><b>Quanto à responsabilidade</b> do trabalho do sistema e o que o sistema precisa fazer? As principais possibilidades:</li><ol start=\"1\" type=\"a\"><li>Calcular a taxa e debitar automaticamente o devedor e/ou crédito do receptor. Forma de débito em dinheiro diretamente (como através de seu cartão de crédito) ou debitar uma conta que representa o dinheiro real (como uma conta ou “bolsa eletrônica” que mantemos em seu nome).</li><li>Calcular e automaticamente informar o devedor e/ou o receptor (na verdade, enviá-los uma fatura).</li><li>Calcular e passar os detalhes para outro sistema (como um sistema de contabilidade ou de faturamento ou de exportação para uso por uma planilha eletrônica).</li><li>Garantir que a informação crua está presente, pronta para ser transferida para outro sistema.<br /><br /></li></ol><li><b>Referência</b> Se a taxa é definida em detalhes em outro lugar, especifique o local onde essa informação pode ser encontrada. Esta é mais aplicável aos impostos, para os quais os materiais de apoio normalmente estão disponíveis.</li></ol>', 'Como especificar requisitos que tratem qualquer taxa ou imposto que o sistema deva calcular?', '<p>Descreve a forma de como especificar qualquer taxa ou imposto que deve ser calculada pelo sistema, compreendendo os fatores chaves sobre qualquer tipo de taxa ou imposto, como: como calcular (a natureza da base de cálculo), o quê está sendo cobrado, por quê está sendo cobrado, quando é cobrado, de quem é cobrado e para quem é repassado.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 25 AS id_insert, 4, 'Aprovação', 'Use o padrão de requisito de Aprovação para especificar que uma determinada ação ( ou conjunto de ações ) deve ser aprovado (ou , em alguns casos aprovados) por uma segunda pessoa antes que ela ocorra.', '<p>Imagine um banco em que um caixa deve ter qualquer grande retirada de dinheiro aprovada por um supervisor. Mas o que constitui grande? Será que variam de caixa para caixa: alguns são mais confiáveis do que outros? O que significa supervisor? Pode qualquer supervisor aprová-la, ou apenas o supervisor do caixa? Aprovação de uma ação é sempre muito mais complicado do que parece à primeira vista. </p><p>Requisitos de aprovação devem responder a algumas ou todas as perguntas a seguir:</p><ol start=\"1\" type=\"1\"><li><b>Qual ação requer a aprovação?</b> Ao que se aplica este requisito de aprovação? O que acontece quando a aprovação é concedida? Se simplesmente não for uma questão de executar uma ação especificada em outro lugar, explicar o que mais está envolvido.<br /><br /></li><li><b>Em que circunstância é necessária à aprovação?</b> Poderia ser sempre. Se não, especificar as condições, como até um limite definido para o usuário, ou classe de usuário (até um determinado valor monetário, por exemplo).<br /><br /></li><li><b>Quem pode aprovar, e em que circunstâncias?</b> Responder a esta pergunta envolve várias etapas:</li><ol start=\"1\" type=\"a\"><li><b>Passo 1:</b> Identificar todos os utilizadores (ou classes de usuários) que podem aprovar esse tipo específico de ação. Também identificar as circunstâncias em que eles podem aprovar - que pode envolver condições semelhantes à pergunta anterior (quando a aprovação é necessária). Por exemplo, talvez seja necessário algum tipo de limite máximo para que um usuário (ou classe de usuário) possa aprovar uma ação específica (distinta do limite máximo para que o usuário possa executar a ação sem a aprovação).</li><li><b>Passo 2:</b> Identificar o potencial aprovador (ou aprovadores) para cada usuário, ou uma maneira de definir quem eles são. Por exemplo, apenas pessoas do mesmo departamento podem ser elegíveis. E nós poderíamos nomear um supervisor para cada usuário e situação que eles estão para ser o aprovador de primeira instância. Quando um caixa de banco precisa de aprovação para a retirada de grande porte, a aprovação deve se limitar à filial do mesmo banco (ou o caos irá reinar!).</li><li><b>Passo 3</b>: Considere o que acontece se um aprovador está ausente. Se você identifica apenas uma pessoa como aprovador, você está em apuros. Você precisa de “um reserva”. Se alguém está realizando este trabalho temporariamente, como o sistema sabe? Conseguir que um sistema se comporte de forma inteligente com base nas informações de que dispõe (tais como saber quem está conectado no momento), tem várias consequências.</li><li><b>Passo 4:</b> Prevenir que um usuário possa aprovar suas próprias ações.<br /><br /></li></ol><li><b>Agilidade necessária para realizar a aprovação?</b> Um requisito de aprovação em si não precisa responder a esta pergunta, embora tenha uma grande influência sobre a melhor maneira de trazer algo que necessita de aprovação para a atenção de um aprovador potencial (que é a próxima pergunta). Se as aprovações são necessárias apenas até ao final do dia, uma aplicação relativamente simples será suficiente, se uma ação deve ser aprovada dentro de dois minutos, é uma questão muito diferente.<br /><br /></li><li><b>Como que algo que aguarda aprovação desperta a atenção de um aprovador?</b> Não existe uma resposta universal a esta pergunta: cada caminho tem suas desvantagens. Decida o que for melhor para seu uso: ou escolha um mecanismo específico, ou apenas especifique as características que você deseja. Possíveis mecanismos de aprovação (junto com alguns pontos fortes e fracos) incluem:</li><ol start=\"1\" type=\"a\"><li>Uma subfunção de aprovação na entrada de dados da própria função. Quando o usuário chama um aprovador à máquina, que então se auto-autentica e realiza a aprovação (ou rejeição). Este é o mecanismo mais fácil de implementar e talvez o mais confiável também, porque ele pode tirar proveito do senso comum do usuário. Há o risco da senha do aprovador estar sendo observada.</li><li>Uma função autônoma de aprovação. Neste caso, um requisito próprio pode ser relacionado com um requisito extra a este padrão.</li><li>Um meio de comunicação eletrônica de e-mail, SMS ou <i>pager</i> ou alguma outra maneira de enviar uma mensagem a um aprovador. Neste caso, soma-se uma função pela qual eles podem conceder aprovação. Use este tipo de mecanismo de mensagens somente se o número de pedidos de aprovação recebida por uma pessoa é relativamente pequeno.<br /><br />Os dois últimos mecanismos precisam de nós para decidir quais aprovadores devem ser informados de algo aguardando aprovação. Normalmente apenas um subconjunto das pessoas autorizadas a aprovar é informado. Se estiver usando um mecanismo de notificação que espera o destinatário responder, envie uma mensagem para uma única pessoa: seria frustrante responder apenas para descobrir que alguém já aprovou a ação.<br /><br /></li></ol><li><b>O que acontece se um aprovador nega aprovação?</b> Você deve sempre fazer esta pergunta. É surpreendente como muitas vezes as especificações deixam de dizer o que ocorre neste caso. Na verdade, existem três situações distintas aqui:</li><ol start=\"1\" type=\"a\"><li>Um aprovador diz, \"eu rejeito isso. Não deve ser aprovado.\" Normalmente, a rejeição é o fim da questão, mas você pode querer considerar a possibilidade de um caminho para o usuário: passar para alguém que pode aprová-lo.</li><li>Um aprovador diz: \"Não posso nem aprovar nem rejeitar isso. Eles fariam isso se, por exemplo, eles acreditam que não está em condições de decidir. O item deve ser transferido para outro aprovador. Você pode decidir que, no seu sistema, esta situação nunca vai surgir. Cada aprovador será sempre apto, a saber, o que fazer, mas se assim for, você deve tomar essa decisão de forma consciente, caso contrário, um usuário poderia ser forçado a fazer um julgamento que não queria.</li><li>Um aprovador diz: \"Preciso de mais informações antes que eu possa decidir\". Neste caso, verificar se o sistema precisa fornecer ao aprovador mais informações. Em caso afirmativo, especificar essa característica.</li></ol></ol>', '<p>Como especificar requisito para requerer aprovação (autorização de outro usuário mais experiente) para realizar determinada ação?</p>', 'Descrição de um requisito que compreenda um processo de aprovação de uma determinada ação ou conjunto de ações.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 26 AS id_insert, 5, 'Fórmula de cálculo', '<p>Use o padrão de requisito de Fórmula de cálculo para especificar como calcular um determinado tipo de valor, ou como determinar um valor através de um processo de etapas lógicas.</p><p>Não utilize o padrão de requisito de Fórmula de cálculo diretamente por fórmulas excessivamente complexa ou lógica. Um tratado matemático, não se presta a espremer em um conjunto de exigências. Em tais casos, escrever um requisito que se refere a uma fonte de autoridade que define os cálculos; não tentar duplicar essa fonte. No entanto, o padrão de requisito de Fórmula de cálculo ainda pode ser útil em sugerir pontos a mencionar um requisito.</p>', '<p>Realizar os cálculos corretamente é essencial, especialmente quando afetam o rendimento de um negócio. A forma como um cálculo deve ser realizado deve ser especificada utilizando enunciados claros para que todos possam verificar e examinar. É surpreendente que os cálculos críticos muitas vezes não são mencionados na documentação do sistema, acreditando que os desenvolvedores farão de forma correta. </p><p>Escreva um requisito para cada cálculo significativo que o sistema deve executar. Não deixe de mencionar até mesmo a fórmula mais óbvia.</p><p>Neste sentido, um requisito de fórmula de cálculo deve observar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Descrição do valor</b> Para o que é utilizada esta fórmula?</li><li><b>A fórmula em si, na forma “&lt;&lt; Nome do Valor &gt;&gt; =....”</b>Escolha o nome do valor com cuidado, porque a fórmula constitui uma definição deste nome. Especifique um nome claro e único dentro do escopo do sistema. Dividi-lo em mais de uma fórmula se torna mais fácil de explicar.</li><li><b>Declarações de todas as variáveis ​​utilizadas</b>. Para cada variável é importante citar:</li><ol start=\"1\" type=\"a\"><li><b>Nome da variável</b>. Capitalizar a primeira letra para torná-la mais fácil de distinguir na fórmula. Use nomes de forma consistente, especialmente quando um valor é o resultado de outro cálculo.</li><li><b>Origem</b>. De onde é que a variável vem? Pode ser o resultado de outra fórmula de cálculo.</li><li><b>Tipo de dados</b> (se aplicável). Se um tipo de dados lógico já foi definido para este valor, recomenda-se se referir a ele. Caso contrário, descrever qual o tipo de dado o valor corresponde  (um número inteiro, um percentual, e assim por diante).</li><li><b>Valores permitidos ou intervalo</b> (se for o caso). Por exemplo, se a variável é uma porcentagem, talvez ela deva estar na faixa de 0-100%.</li><li><b>Número de casas decimais</b>, caso se justifique.</li></ol><li><b>Refinamentos do cálculo</b>. Se o resultado deve ser calculado para um determinado nível de precisão ou arredondado.</li><li><b>Limitações de aplicabilidade</b>. Se esta fórmula é adequada apenas em certas circunstâncias, deve ser citado (por exemplo, para uso nos Estados Unidos somente).</li><li><b>Referência a fórmulas de cálculo</b>. Sempre que possível, cite uma referência externa (ou mais de uma) que explica a fórmula. É especialmente importante quando existe um regulamento ou lei que define exatamente o que deve ser feito.</li><li><b>Um exemplo</b> Recomenda-se exemplificar para deixar mais claro como realizar o cálculo.</li></ol>', 'Como especificar um requisito que trate das particularidades de  um cálculo embutido no sistema?', 'Descrever uma fórmula de cálculo para um determinado tipo de valor.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 27 AS id_insert, 5, 'Aderência ao padrão', 'Use o padrão de requisito Aderência ao padrão para especificar que alguns ou todos os requisitos em uma especificação de requisitos externos devem ser satisfeitas , como se esses requisitos estavam presentes na especificação atual.', '<p>Neste contexto, deve-se entender um padrão como qualquer documento ou coleção de documentos que faz exigências sobre como as coisas devem ser realizadas. Incluem leis (impostos, acesso por pessoas com deficiência), regras governamentais, padrões da empresa, padrões de qualidade (como ISO 9001), padrões de informação (tais como moeda e códigos de país), e normas técnicas de diversos tipos (por exemplo, formatos de arquivo, protocolos de comunicação e convenções de interface do usuário).</p><p>Vamos dividir as normas em algumas categorias com o propósito de dizer um pouco sobre como abordá-las:</p><ol start=\"1\" type=\"1\"><li><b>Legislação específica, normas e códigos de conduta.</b> Ficar em conformidade com esses tipos de padrões frequentemente envolve bastante trabalho, o que é justificável, porque eles geralmente têm uma grande influência sobre o propósito central do sistema, especialmente se você tem pouco conhecimento no domínio em questão. </li><li><b>Legislação que se aplica a todas as empresas dentro de uma jurisdição</b> (tais como imposto sobre vendas e os regulamentos financeiros). Geralmente, não é necessário estudar as próprias leis: consulte um especialista nessa área, como o contador da empresa, advogado, departamento financeiro ou auditores.</li><li><b>Normas da empresa</b>. Estas estão geralmente preocupadas com a qualidade do software e consistência, embora possam designar certas funções de apoio (como o monitoramento do sistema). Recomenda-se que quando o requisito tratar de normas da empresa o especifique como requisito não funcional e os demais como funcionais. </li><li><b>Normas técnicas</b> (tais como formatos de arquivo e protocolos de comunicação) Normalmente, você não precisa entrar em detalhes: alguma coisa pode estar errada se você tive de implementar uma norma técnica geral (quando isso não é central para o propósito do seu sistema). Por exemplo, se alguém pede para que o sistema suporte um formato de arquivo específico que nenhum software de prateleira disponível reconhece o formato, você deve questionar seriamente a razão.</li></ol><p>Um requisito de aderência ao padrão deve observar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>O nome do padrão.</b> O nome deve ser claro, de modo que ele não possa ser confundido com qualquer outra norma. Você pode utilizar como prefixo o nome da organização que produziu o padrão.</li><li><b>A finalidade do padrão</b>. Se o nome do padrão não transmite a sua finalidade, incluir um resumo do objetivo do padrão, (por exemplo, “ISO 3166, padrão internacional para códigos de país e região”).</li><li><b>A versão do padrão que deve ser observada</b>. Se o sistema deve observar mais de uma versão ou deve observar a versão mais recente. Ao especificar a conformidade com uma lei ou regulamentação governamental, indicar o ano em que foi promulgada, se ela não tem uma “versão”. </li><li><b>Partes do padrão a serem observadas</b> (se aplicável) Se o sistema só precisa cumprir algumas partes da norma, identificá-las brevemente. Se houver muitos itens para identificar, recomenda-se fazê-los utilizando requisitos extras. Se você precisa de muitos requisitos extras, considere dividi-los em uma especificação de requisitos separada. </li><li><b>Localização</b>. Local em que uma cópia da norma pode ser encontrada. Cite todas as fontes em que esteja disponível para os membros da equipe do projeto: a URL (<i>Uniform Resource Locator</i>) de uma fonte acessível ao público <i>online</i>, cópias em disco rígido e assim por diante.</li></ol><p>Se um padrão já existe para um aspecto particular de um sistema, considere utiliza-lo (ao invés de criar um novo). Alguns padrões que podem ser observados:</p><ul type=\"disc\"><li>http://www.iso.org: ISO, <i>International Organization for Standardization</i>, produz uma ampla gama de normas relacionadas à qualidade (a série ISO 9000), empresa, organização e gestão, bem como específicos da indústria e de padrões de domínio específico.</li><li>http://www.w3c.org: <i>World Wide Web Consortium</i> é responsável por uma grande variedade de padrões que definem aspectos fundamentais da Web e temas adjacentes, incluindo muitos relacionados a padrões XML.</li><li>http://www.ietf.org: <i>Internet Engineering Task Force</i> (IETF) gerencia o RFC (<i>Request For Comment</i>) normas que cobrem uma ampla gama de assuntos relacionados com o software, incluindo muitos relativos à web.</li><li>http://www.ieee.org: <i>The Institute of Electrical and Electronics Engineers</i> (IEEE) produz um número grande de normas técnicas, incluindo muitas áreas da informática, telecomunicações e qualidade.</li><li>http://www.omg.org: <i>Object Management Group</i> produz padrões para a análise e projeto de software (incluindo a UML - <i>Unified Modeling Language-standard</i>), segurança, modelagem de negócios e para algumas áreas especializadas.</li><li>http://www.oasis-open.org: <i>The Organization for the Advancement of Structured Information Standards</i> (OASIS) tem uma série de normas relacionadas com XML e áreas relacionadas, inclusive para processos de negócio e de segurança.</li></ul>', 'Como especificar um requisito que trate de exigências de uma norma ou padrão?', 'Especificar requisitos que devem seguir orientações externas, no qual compreende as referencias especificadas como: nome da referência, versão, a quais requisitos que se aplicam, quanto a localização da referência externa, e a informações sobre prioridade.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 28 AS id_insert, 5, 'Documentação', 'Use o padrão de requisito de Documentação para especificar que um determinado tipo de documentação deve ser produzida.', '<p>Documentação pode ser considerada como algo que é escrito sobre um sistema, não importando a forma utilizada, ou seja, não se restringindo apenas a documentos tradicionais. Ajuda <i>on-line</i>, apresentações (no <i>Microsoft PowerPoint</i>, por exemplo), comentários e outras anotações em código-fonte do programa podem ser consideradas documentação. </p><p>Um requisito de documentação deve observar as seguintes partes:</p><ol start=\"1\" type=\"1\"><li>O <b>nome</b> e/ou <b>tipo</b> de documentação. Como é chamado este tipo de documento?</li><li>A <b>descrição</b> do que a documentação deve conter. Especifique em um nível de detalhamento de modo a satisfazer as exigências necessárias do documento. </li><li>O <b>formato</b> ou <b>meio</b> (como um documento do <i>Word</i> ou páginas HTML). Preferencialmente deixar o mais aberto possível (por exemplo, “um documento” ou “<i>online</i>”).</li><li>Um nome <b>padrão</b> para este tipo de documentação. Deve estar em conformidade, se for o caso (por exemplo, o uso de modelos de documentos da empresa), juntamente com uma descrição de onde este padrão pode ser encontrado. Isso normalmente se aplica quando uma empresa tem normas internas para determinados tipos de documentação. </li><li>A <b>linguagem</b> na qual a documentação deve ser escrita (se não for óbvio). Em alguns casos, pode ser necessário declarar o dialeto utilizado (por exemplo, para inglês, se deve ser britânico, americano, australiano ou algum outro tipo). Para um sistema multi-idioma, alguma documentação pode precisar ser fornecida em vários idiomas, nestes casos, deve-se explicitamente identificar em quais línguas.</li></ol>', 'Como especificar requisitos ligados à documentação?', '<p>Compreende os padrões adotados para elaboração da documentação que deverá ser produzida, no qual compreende: o nome e tipo da documentação, o formato e o meio a ser utilizada, o padrão ou guia de estilo que o documento deverá serguir, e a linguagem escrita utilizada.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 29 AS id_insert, 5, 'Referência a requisitos', 'Use o padrão de requisitos Referência a requisitos para especificar que alguns ou todos os requisitos em uma especificação de requisitos externos devem ser satisfeitas, como se esses requisitos estavam presentes na especificação atual.', '<p>Maior clareza e capacidade de gerenciamento é um bom motivo para se referir às especificações externas. Outra razão é que essas especificações podem ser referenciadas por outros sistemas. A terceira razão é que uma especificação sobre um tema específico tende a ser escrita de forma mais detalhada do que como parte de outra especificação.</p><p>Um requisito que se refere aos requisitos externos deve conter:</p><ul type=\"disc\"><li><b>Nome da especificação de referência</b>. Use o próprio nome da especificação, recomenda-se também a descrição de um detalhamento extra, no sentido de evitar possível confusão com alguma outra especificação similar.</li><li><b>Versão da especificação de referência</b>. É essencial, se não citada pode ocorrer confusão se houver mais de uma versão ou se uma nova versão for produzida. </li><li><b>Os requisitos que se aplicam</b>. O sistema deve aderir a toda a especificação referenciada ou apenas parte dela? Se não deve atender a toda a especificação, identificar claramente quais as partes devem ser satisfeitas.</li><li><b>Localização da especificação de referência</b>. Local onde a documentação pode ser encontrada.</li><li><b>Informações sobre prioridade</b>. Recomenda-se considerar seriamente a priorização dos requisitos referenciados. Não havendo a possibilidade de identificar as prioridades diretamente, podemos definir os níveis de prioridade utilizando-se de uma maneira diferente do que a utilizada em nossas especificações habituais. Observa-se que precisamos localizar as prioridades explicitamente, seja através da atribuição de uma prioridade para todos, ou dizendo quais requisitos tem tal prioridade, ou a definição de uma tradução entre os esquemas de prioridade utilizados pelas duas especificações.</li></ul>', 'A especificação de requisitos detalhados para um sistema comercial é um documento que exige esforço considerável para escrever e, igualmente importante, para ler e rever. Tratar certas partes como especificações separadas torna mais fácil lidar com eles. No entanto, como especificar requisitos que citam partes de outros requisitos?', '<p>Descrever como especificar um referência a uma especificação de requisitos externa.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 30 AS id_insert, 5, 'Tecnologia', '<p>Use o padrão de requisito de Tecnologia para especificar a tecnologia que deve (ou não) ser usado para construir ou operar o sistema, ou com os quais o sistema deve ser capaz de interagir ou não compatíveis. </p><p>Não usar o padrão de requisito de tecnologia para fazer as escolhas tecnológicas. </p>', '<p>A tecnologia se refere a quaisquer <i>hardwares</i> externamente produzidos ou <i>software</i> que é usado na construção, instalação e execução de um sistema. Podemos dividir em três áreas:</p><ul type=\"disc\"><li><b>Área 1: Para usar na produção</b> - <i>hardware</i>, sistema operacional, banco de dados, servidor web, <i>firewall</i>, fonte de alimentação e qualquer outra tecnologia necessária para fornecer suporte à vida de nossa aplicação.</li><li><b>Área 2: Para interagir com a produção</b>. Como um navegador da web. Inclui a interação indireta, como a exportação de arquivos ou dados que estão sendo lidos por outra aplicação (e vice-versa, a importação de arquivos).<br /><br />Todas as interfaces entre sistemas devem ser especificadas de acordo com o padrão de requisito interface entre sistemas. Cada requisito de interface entre sistemas deve indicar a tecnologia a ser utilizada para a interface.<br /><br /> Às vezes você precisa fazer um julgamento considerando algo como uma tecnologia ou como um modelo a seguir (ou ambos). Por exemplo, se o nosso sistema precisa produzir páginas HTML a ser exibido em um navegador web, estamos cumprindo com o padrão HTML ou estamos interagindo (indiretamente) com um browser? A melhor maneira de decidir é olhar para o propósito fundamental: por que estamos fazendo isso? (i) Se o objetivo é permitir o uso de um navegador Web, ninguém vai se importar se usamos HTML (nem qual a versão do HTML), (ii) ou se o browser fornecido é capaz de apresentar a nossa produção de forma satisfatória. Neste caso, recomenda-se especificar a tecnologia em vez do modelo a seguir.</li><li><b>Área 3: Para uso em desenvolvimento</b>, como uma linguagem de programação. Documentação, testes e instalação são considerados como abrangidos por esta área. Motivações comuns para o desenvolvimento de requisitos ligados a tecnologia são:</li><ul type=\"circle\"><li>Para utilizar as competências que a organização já tem.</li><li>Para ser compatível com os softwares existentes (para que possamos reutilizar o máximo possível).</li><li>Se encaixar com as práticas de desenvolvimento existente.</li><li>Para permitir o uso de ferramentas de desenvolvimento já adquiridas.</li></ul></ul><p>Especificar a tecnologia de desenvolvimento é mais importante quando o desenvolvimento envolve terceirização, especialmente se a manutenção e desenvolvimento serão realizados “em casa”. </p><p>Um requisito de tecnologia deve observar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Descrição da tecnologia</b>. Qual a tecnologia que estamos especificando? Esta descrição deve ser realizada de forma apropriada, sem necessariamente ser específica. Não é citado um produto específico. Ele pode incorporar uma fórmula para determinar um, ou mais produtos, de forma semelhante utilizada para especificar a versão da tecnologia que deve ser apoiada, conforme retratado na seção 3(c) logo abaixo (apesar de que fórmulas desta natureza podem se tornar complexas).</li><li><b>Uso da tecnologia</b>. Qual o papel que deve desempenhar esta tecnologia no sistema? No mínimo, transmitir qual das três últimas áreas que se refere (uso em produção, interagir com, uso em desenvolvimento). A definição pode ser restritiva: “o sistema não deve usar tal e tal tecnologia”.</li><li><b>Versão da tecnologia</b> (se relevante) Mencionar versões em uma especificação de requisitos é sempre problemático, porque não queremos amarrar o sistema apenas para versões específicas que podem tornar-se obsoletas, nem queremos deixar em aberto para cada nova versão que pode vir no futuro. Não devemos ser desnecessariamente específicos ou restritivos. Há três abordagens possíveis:</li><ol start=\"1\" type=\"a\"><li><b>Não mencionar versões em tudo</b>. Normalmente, não se faz necessário a especificação das versões das tecnologias em particular. Recomenda-se a especificação da versão quando uma nova versão da tecnologia é liberada ou se poderá haver algum problema quando uma nova versão surgir.  De modo geral, há pouco a se ganhar em falar sobre as versões.</li><li><b>Declarar uma ou mais versões específicas</b>. Recomenda-se especificar explicitamente o suporte do sistema às novas versões da tecnologia adotada, retratando-a conforme recomendações do item (c) desta.</li><li><b>Elaborar uma fórmula</b>, baseada em torno da versão mais recentemente lançada, que se expressa em termos que não mencionam a versão explícita e identifica uma ou mais versões que devem ser suportadas. Por exemplo, poderíamos descrever a versão mais recente e as duas versões anteriores, ou todas as versões dos últimos dois anos  até versão mais recente. </li></ol><li><b>Motivação</b>. Por que estamos especificando esta tecnologia?</li></ol><p>Se o sistema deve trabalhar com uma gama de tecnologias (por exemplo, envolver diversos navegadores web), deve-se escrever um requisito separado para cada um. Isso torna mais difícil negligencia-los (ou seja, é mais fácil rastrear cada tecnologia suportada), e permite que a cada uma delas seja atribuída a sua própria prioridade.</p>', 'Sabe-se que um requisito não deve expressar decisões sobre qual tecnologia usar, devem descrever sobre o cenário em que o sistema deve se ajustar ou restrições para que a tecnologia possa ser usada no sistema. Como especificar requisitos que tratem de aspectos peculiares a tecnologia a ser utilizada?', '<p>Descrição de como especificar a necessidade e/ou utilização de um determinada tecnologia.</p>' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 31 AS id_insert, 5, 'Ilimitado', '<p>Use o padrão de requisito Ilimitado para indicar uma forma particular em que o sistema não deve ser limitada a um ambiente de negócios. O padrão de requisito Ilimitado diz como uma única instalação do sistema deve ser capaz de se adaptar à organização e ao lugar onde ele está instalado.</p><p>Não usar o padrão de requisito Ilimitado para especificar que o sistema tem suporte a várias instâncias de qualquer coisa ao mesmo tempo (como várias moedas), usar o padrão de exigência multiness, o próximo padrão neste capítulo, para isso.</p>', '<p>Limitado significa na perspectiva ou extensão (em apenas um local). Se você construir um sistema para uma organização, é o que você vai ter, nem mais, nem menos. Não assuma que vai se adequar a qualquer outra organização. No entanto, as empresas às vezes fazem: executivos impressionados com seu novo sistema tem a brilhante ideia de ganhar dinheiro vendendo seu sistema. Mas eles, provavelmente, terão uma surpresa desagradável se medidas adequadas não forem tomadas, é aí que entra os requisitos de “ilimitado”.</p><p>Na construção de um produto ou um sistema para vários locais, ele deve atender a cada um dos ambientes em que ele será instalado ou, pelo menos, o sistema será muito melhor recebido (e, o produto será mais competitivo). Mas também se deve tomar medidas sensatas para fazer um sistema passível de instalação em outros ambientes, sem muito retrabalho, porque a adição depois é mais difícil, invariavelmente, muito mais do que incorporá-lo desde o início.</p><p>Escreva um requisito ilimitado como uma declaração para definir o alcance das instalações (como a venda para outras empresas do mesmo ramo no mesmo país). Em seguida, escreva requisitos mais detalhados para esclarecer o que isso realmente significa em termos  do que o sistema não deve ser amarrado. Mas, uma vez que temos os requisitos detalhados, o requisito original pode ser descartado ou considerado uma declaração introdutória. Em uma hierarquia de dois níveis de requisito, o requisito ilimitado original equivale a um requisito de negócio de alto nível, e o resto são requisitos detalhados.</p><p>O primeiro passo, então, é considerar que o sistema pode ser instalado. As possibilidades mais comuns são estas:</p><ul type=\"disc\"><li><b>Único site</b>. Se for um sistema para um único local (digamos, para uso interno), você pode ter certeza de que nunca vai ser instalado em qualquer outro lugar? Se você acredita estar certo, recomenda-se declarar isso explicitamente como uma suposição, tanto para servir como discussão como também para se defender contra acusações de inflexibilidade no futuro.</li><li><b>Locais diferentes</b>. Se for para ser instalado em locais ou vários departamentos ou unidades operacionais pertencentes à mesma organização, como diversas vezes eles são, o que difere de um para outro?</li><li><b>Organizações diferentes.</b> É possível que o sistema seja instalado por outras organizações? Em caso afirmativo, de que forma as práticas do negócio diferem? Responder a essa pergunta geralmente envolve uma investigação séria. Se você assumir que todas fazem as mesmas coisas da mesma forma, é provável que você esteja errado.</li><li><b>Diferentes indústrias</b>. Se você está construindo um sistema para utilização em uma indústria, mas gostaria de estender seu uso para outros, o que eles fazem de diferente? Fundamentalmente as indústrias podem ser muito semelhantes e ainda assim variar em pequenos detalhes (como a terminologia utilizada).</li><li><b>Diferentes países e regiões</b>. Todos sabem que outros países falam línguas diferentes e usam moedas diferentes, mas eles também fazem muitas outras coisas de forma diferente. Com o que o sistema deve se preocupar? Mas isso não significa que o sistema precisa se adaptar a todas as diferenças locais. Uma subsidiária no exterior pode estar acostumada a trabalhar em nossa língua e ficar satisfeita em usar o nosso sistema na sua língua original.</li></ul><p>Vale a pena repetir que estamos falando apenas de adaptar todo o sistema para atender outros ambientes com outras diversas variações ao mesmo tempo, isso é o que trata um padrão de requisito ilimitado. Por exemplo, uma instalação deve ser capaz de dar suporte a usuários de vários países, com vários idiomas, várias moedas, e assim por diante, envolve muito mais do que apenas evitar uma visão limitada. Uma única coisa variável não é o mesmo que uma coisa múltipla. Um sistema que permite a sua moeda base ser configurada definitivamente não é automaticamente multimoeda.</p><p>No entanto, não exagere! Não exija coisas que são susceptíveis de serem caras de implementar, mas tem uma pequena chance de ser necessário. Além disso, algumas coisas como tipos de dados, são tão fundamentais que permitir a variação de uma instalação para outra é muito difícil.</p><p>Neste sentido, um requisito ilimitado deve transmitir:</p><ol start=\"1\" type=\"1\"><li><b>Condições de adequação</b>. Quão amplo (e quão limitada) é o conjunto de ambientes para os quais o sistema deve ser adequado? Seja o mais específico possível. Se ele pode ser instalado em outros países, mas apenas em um continente (por exemplo, Europa). Pode ajudar os desenvolvedores, a saber, que não vai ser instalado em qualquer lugar com uma linguagem que precisa de um conjunto de caracteres específico (como em grande parte da Ásia).</li><li><b>Motivação.</b> Por que queremos que o sistema seja instalado nesses ambientes diferentes? Por exemplo, podemos querer vender o sistema lá, ou talvez a empresa tenha escritórios lá. Se estes são apenas objetivos secundários, é importante saber, a fim de colocar esse requisito em perspectiva.</li><li><b>Exemplos de variações.</b> Quais são as implicações da necessidade de instalar o sistema nestes ambientes? Dê alguns exemplos dos tipos de variação de uma instalação para outra que é necessária (como uma moeda base diferente).</li></ol>', '<p>Como especificar um requisito que trate o sistema de forma “ilimitada” na perspectiva de ambiente de negócio?</p><p>Como definir o ambiente de negócio que o sistema se destina?</p>', 'Descrever como uma única instalação do sistema deve ser capaz de se adaptar à organização e ao lugar onde ele está instalado.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 32 AS id_insert, 5, 'Múltiplo', '<p>Use o padrão de requisito Múltiplo para especificar que o sistema deve acomodar vários  de alguma coisa, ao mesmo tempo, cada qual tem sua própria interface de usuário radicalmente distintos ou cujos dados devem ser mantidos rigorosamente além do que a dos outros. (Veja as seções que seguem, para uma explanação mais detalhada dos critérios de aptidão).</p><p>Não usar o padrão de requisito Múltiplo quando o sistema precisa suportar apenas um de uma série de alternativas, usar o padrão de requisito Ilimitado nesse caso. A diferença é que Ilimitado permite que um aspecto a variar, mas a variante é utilizado o mesmo sistema; Múltiplo permite que várias instâncias de um aspecto a conviver de uma vez. Além disso, não usar o padrão de requisito Múltiplo quando o suporte para várias coisas é natural ou embutido.</p>', '<p>A interface de usuário com suporte a diversas línguas, por exemplo, é obviamente para uma grande empresa e merece ser tratado com seriedade nos requisitos (se precisar). Ele adiciona uma dimensão extra ao sistema, e é para adicionar este tipo de riqueza que o padrão de requisito múltiplo se destina. Poderíamos dizer que nosso sistema é multicliente, multiproduto, e assim por diante, mas nada se ganha ao fazer isso, e o padrão de requisito múltiplo não é para isso. Como, então, podemos decidir se algo é significativo o suficiente para justificar um requisito múltiplo? Ele deve satisfazer um ou mais dos seguintes critérios:</p><ul type=\"disc\"><li><b>Critério 1: experiências de usuários distintos</b>, onde cada instância alternativa tem sua própria versão do que o usuário vê, tal como um conjunto separado de páginas web para cada alternativa. </li><li><b>Critério 2: separação dos dados</b>, quando os dados associados a uma instância alternativa devem ser apresentados separadamente, isolados dos demais dados. Um usuário pode ser capaz de ver os dados através de uma única alternativa, e, os usuários que podem ver mais de uma alternativa, não deve vê-los misturado. (Por exemplo, se estamos executando um sistema multisserviço, um usuário pode ser capaz de ver as atividades de seu próprio departamento.) Cada alternativa de fato tem seu próprio pequeno mundo, que opera a um maior ou menor grau, como cada um tenha seu próprio sistema. Pode haver pessoas, no entanto, que pode abranger vário ou todos eles. O grau de separação pode variar.</li><li><b>Critério 3: Dados não passíveis de adição</b>, quando os dados são incompatíveis, e não tem sentido serem somados. Isso ocorre em qualquer sistema que tenha quantias em várias unidades diferentes. E esse é o teste para este critério: são como maçãs e laranjas que não podem ser somados? (Por exemplo, em um sistema multimoeda, não podemos simplesmente adicionar uma quantia em dólares dos EUA para um valor em Euros).</li></ul><p>É possível satisfazer mais de um desses critérios. Por exemplo, um sistema que suporta várias empresas poderia atender aos dois primeiros critérios: cada empresa pode ter suas páginas Web e os seus dados devem ser segregados. Se algo não satisfaz nenhum desses critérios, não é um múltiplo. O que fazemos então? O sistema ainda precisa de suporte a vários deles de uma forma ou de outra, mas não deve aplicar esse padrão. </p><p>Um requisito múltiplo não é necessário se um requisito de extensibilidade for suficiente.</p><p>Um requisito múltiplo deve observar o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Tipo de múltiplo</b>. Que tipo de coisa haverá suporte a diferentes opções? (Por exemplo, vários idiomas).</li><li><b>Ponto de apoio</b>. Resuma o nível de apoio que é esperado do sistema. Por exemplo, apenas o site externo deve suportar várias línguas. Não entrar em grandes detalhes, use requisitos extras para explicitar aspectos específicos.</li><li><b>Número esperado de instâncias</b>. Quando dizemos múltiplos, de quantos estamos falando? Isso só é significativo quando uma interface de usuário distinta deve ser construída para cada um, por exemplo, para cada linguagem suportada. Expressar como um número (ou faixa), ou descrever uma condição que determina quantidade (por exemplo, um para cada empresa configurada no sistema).</li><li><b>Limitações.</b> Quais simplificações são aceitáveis? Não force os desenvolvedores a enfrentar aspectos difíceis se eles são desnecessários.</li></ol>', '		Como especificar um requisito que dê uma dimensão extra ao sistema?', 'Descrever múltiplo de uma determinada funcionalidade, cada qual com a sua própria interface de usuário.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 33 AS id_insert, 5, 'Multi-organizacional', '<p>Use o padrão de requisito Multi-organizacional para especificar um tipo de construção organizacional que o sistema deve ser capaz de suportar, quer seja de unidades de um tipo específico ou uma estrutura mais complexa (como uma hierarquia).</p><p>Não use o padrão de requisito Multi-organizacional  para enumerar as unidades organizacionais próprias (como a listagem de empresas reais ou departamentos).</p>', '<p>Uma unidade organizacional é qualquer subconjunto de uma organização que torna mais fácil de gerenciar. É uma coleção de pessoas que você pode visitar, tais como “o departamento de financeiro”. Um tipo de unidade de organização é um resumo do conceito organização, como o “departamento” de que as unidades da organização são instanciadas. Aqui estão alguns exemplos comuns dos tipos de unidade de organização: empresa, escritório, filial, departamento, e região. Relações entre os tipos de unidade de organização definem a estrutura da organização como um todo. Os requisitos multi-organizacional se preocupam com os tipos de unidade da organização.</p><p>A estrutura de uma organização nem sempre é uniforme ou consistente. A empresa pode ter vários escritórios que se organizam de forma muito diferente. Mesmo com uma boa hierarquia, com um número fixo de níveis por toda parte, muitas vezes não é suficiente. Podemos encontrar também vários departamentos com a mesma finalidade em escritórios diferentes. Se você aspira à construção de um sistema que se adapta a maneira como uma empresa funciona, você precisa entender as partes que a constituem.</p><p>Se o sistema será instalado em vários lugares, especifique quais os tipos de unidade de organização cada instalação deve atender, mesmo que haja um maior nível de organização acima de todos eles.</p><p>Existem dois tipos de organização multi-organizacional. O primeiro tipo define um tipo particular de unidade e deve retratar:</p><ol start=\"1\" type=\"1\"><li><b>Nome do tipo de unidade</b>. Identificar o tipo específico de unidade (por exemplo, “departamento” ou “ramo”).</li><li><b>Definição do tipo de unidade</b>. Definir precisamente o que se entende por este tipo de unidade (Por exemplo, o que é um “ramo”?).</li><li><b>Tipo da unidade pai </b>(se houver). Incluir esta definição caso a unidade não seja uma unidade organizacional de nível superior. </li><li><b>Características</b>. Para que serve este tipo de unidade organizacional? Que impacto isso tem sobre o sistema? Concentre-se em aspectos que afetam as funções individuais, especialmente as restrições de acesso e exibição de informações e critérios de seleção.</li><li><b>Número esperado de instâncias</b>. Para um tipo de unidade da organização no nível superior, aplica-se um número absoluto (quantidade de empresas). Para as unidades de nível inferior, indique o número mais elevado por unidade (por exemplo, quantos departamentos por empresa).</li></ol><p>O segundo tipo de requisito multi-organizacional pede a capacidade de definir uma estrutura organizacional dinâmica (configurando-a no sistema). Este tipo de requisito deve conter:</p><ol start=\"1\" type=\"1\"><li><b>Estrutura</b>. Descrever o tipo de arranjo de unidades abstratas que queremos (por exemplo, uma hierarquia é o mais comum). Se algo mais complicado é necessário (como ser capaz de criar uma estrutura diferente para cada empresa, ou dupla cadeia hierárquica), deve-se explicar como ele se encaixa e sua finalidade.</li><li><b>Características.</b> Como no primeiro tipo de requisito. É recomendável permitir que a estrutura a ser configurada aceite que todos os tipos de unidades tenham as mesmas características, tanto quanto o sistema está interessado (tal como os elementos de informação sobre cada tipo de unidade: ID, nome, nome do gerente, e assim por diante).<br /><br /> Uma característica que devemos pedir é a capacidade de definir um nome para cada tipo de unidade de organização. Por exemplo, se apoiamos qualquer hierarquia de três níveis, o que cada nível representa? Sem nomes, não há maneira de exibir qualquer uma dessas coisas nos termos em que os usuários estão familiarizados.</li></ol>', '<p>Negligenciar a estrutura organizacional durante a especificação de um sistema é susceptível a conduzir a resultados insatisfatórios e constantes dificuldades operacionais.</p><p>Como especificar uma estrutura organizacional que o sistema deva ser capaz de suportar? </p><p>Como podemos especificar requisitos de forma a organizar os usuários ao longo das linhas do próprio negócio?</p>', 'Especificar unidades organizacionais múltiplas.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 34 AS id_insert, 5, 'Multi-idioma', 'Use o padrão de requisito Multi-Linguagem para especificar que o sistema é capaz de exibir sua interface de usuário em mais de uma linguagem alternativa natural (pelo menos uma classe de usuários, embora não necessariamente todos). Também utilizá-lo para especificar que o sistema pode produzir uma saída (por exemplo, imprimir cartas ou e-mails de ações de geração) ou aceitar a entrada em mais de um idioma.', '<p>A maioria do que está envolvido na especificação multi-idioma é dito em termos geral no padrão requisito múltiplo (que este padrão estende). Este padrão especifica requisitos multi-idioma de forma mais fácil e aponta algumas considerações específicas.</p><p>De modo geral, suporte a mais de um idioma é trabalhoso, não é apenas uma questão de criar um conjunto extra de páginas web para cada idioma. Exija-o apenas que se for essencial.</p><p>Considerar também as diferenças culturais e sensibilidades nacionais. Cada versão de idioma simplesmente é uma tradução direta do outro ou devemos fazer algo mais? O que é aceitável na cultura de um grupo de pessoas que falam uma língua pode diferir do que é aceitável em outro lugar. Isso se aplica a textos e imagens e outros tipos de recursos.</p><p>A norma internacional que define códigos para uso de línguas é a ISO 639.</p><p>Neste sentido, um padrão multi-idioma deve observar:</p><ol start=\"1\" type=\"1\"><li><b>Ponto de apoio</b>. Quanto de apoio multi-idioma nós precisamos do sistema? Solicitar uma interface de usuário com suporte multi-idioma para apenas uma classe de usuários pode reduzir drasticamente a quantidade de trabalho. Considerar cada classe de usuários separadamente. Normalmente, um apoio multi-idioma é entregue apenas aos clientes, e os empregados devem se contentar com uma única língua.</li><li><b>Número esperado de instâncias</b>. Quantas línguas que estamos propensos a apoiar? Se estiver planejando apoiar dialetos, podemos dizer um número separado para eles, porque eles oferecem menos trabalho e menor risco.</li><li><b>Limitações</b>. Como podemos tornar a implementação multi-idioma menos onerosa? Se pudermos fazer sem suporte para idiomas com conjuntos de caracteres especiais (como o chinês e o japonês). Da mesma forma, é menos oneroso se não precisamos nos preocupar com idiomas que são lidos da direita para a esquerda (como o árabe).</li></ol><p>(Esta é uma adaptação do conteúdo descrito no padrão de requisito múltiplo)</p>', 'Como especificar requisitos que aponte considerações específicas envolvidas para suporte a multi-idioma?', 'Especificar se o sistema é capaz de exibir interfaces de usuário em mais de uma linguagem.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 35 AS id_insert, 6, 'Tempo de resposta', '<p>Use o padrão de requisito Tempo de resposta para especificar quanto tempo o sistema pode demorar para responder a um pedido. Ele é geralmente usado quando o tempo de uma operação que é necessário é de interesse de uma pessoa (normalmente um usuário) ou outro sistema.</p><p>Não use o padrão de requisito Tempo de resposta apenas para o bem dela. Se um tempo de resposta em particular não é vital, não se preocupe com isso.</p>', '<p>Tempo de resposta é o período de tempo entre um pedido submetido a um determinado lugar para um sistema e uma resposta sendo percebido no mesmo lugar. É mais popularmente aplicada a tempo de resposta do usuário, que é o período de tempo entre um usuário enviar uma solicitação (apertar o botão) e a resposta que está sendo exibida em sua tela. Mas este padrão pode ser usado para outras operações, como por exemplo, os processos físicos (tais como o tempo para fabricar ou entregar algo fisicamente) e processos que envolvam várias pessoas (por exemplo, se um passo deve ser aprovado por um supervisor). Note, porém, que é especialmente difícil de atribuir metas de tempo para o sistema em si em tais casos. </p><p>Assim, existem quatro maneiras diferentes para afirmar um tempo de resposta para um objetivo:</p><p><b>Abordagem 1</b>: Definir um requisito quantitativo. Esta é a maneira mais comum e que é geralmente sugerida. Isto pode ser feito facilmente, basta inventar um valor, mas o problema fica na implementação e teste deste valor.  Um requisito deste tipo é mais usado ao decidir que configuração de <i>hardware</i> é necessária, uma vez que o sistema já foi construído.</p><p><b>Abordagem 2</b>: Informá-lo informalmente. Explicá-lo para o entendimento dos desenvolvedores sobre o que estamos buscando, mas não como um requisito. Declarar a mesma informação como se estivesse escrevendo um requisito de acordo com a Abordagem 1, mas escrevê-la como uma orientação informal para os desenvolvedores. Desde que seja informal, não precisa ser tão rigorosa como se você estivesse escrevendo um requisito, mas ainda refletir um pouco sobre cada um dos elementos de informação mencionados.</p><p><b>Abordagem 3</b>: Definir os requisitos como medidas a tomar para buscar bons tempos de resposta. Ao invés de informar um desempenho quantitativo, é muito mais proveitoso identificar e especificar as medidas que podem ser tomadas para dar ao sistema o tempo de resposta melhor possível. </p><p><b>Abordagem 4</b>: Não diga nada. Depois de termos pensado em tempos de resposta para algum aspecto de um sistema, uma opção perfeitamente válida é decidir não mencioná-lo na especificação de requisitos. Em vários pontos, este padrão de requisito sugere dizer nada. Inação positiva!</p><p>Além de simplesmente escolher uma das seguintes formas, eles podem ser combinados em estratégias mais ricas. Assim, sugere-se:</p><p><b>Estratégia 1</b>: Quebrar em metas quantitativas. Recomenda-se como ponto de partida, tempos de respostas informados pelos usuários. Execute os seguintes passos:</p><p>Decidir sobre um tempo de resposta máximo aceitável para os usuários: por exemplo, dois segundos.</p><p>Identificar as partes constituintes envolvidos na entrega da resposta. Isso precisa ser feito apenas em um nível muito alto, com a finalidade de alocar tempo para cada peça. Por exemplo, tudo entre o PC do usuário da web e o nosso aplicativo <i>back-end</i> pode ser considerada como uma peça. Ou você poderia tratar a Internet como uma peça e seu roteador, <i>firewall</i>, servidor web, e rede interna como outra peça. Qualquer sistema externo deve ser chamado como outra peça. Algumas peças podem ser de fora do escopo do sistema. Assumir como indicativo o <i>set-up</i> de um <i>hardware</i>, se necessário.</p><p>Alocar uma fração do tempo de resposta de ponta a ponta a cada componente (ou grupo de componentes). Isto irá envolver algum trabalho de adivinhação, mas você provavelmente não irá errar por muito. No nosso exemplo, podemos alocar para nosso sistema de aplicação meio segundo dos dois segundos estimados.</p><p>Especifique um requisito de tempo de resposta para a porção que está dentro do escopo do sistema, usando a quantidade de tempo de resposta que lhe foi atribuído. Alternativamente, você pode especificar um requisito para cada componente lógico dentro do escopo.</p><p>Esta estratégia é especialmente importante quando se lida com processos que envolvem a intervenção humana (como a aprovação manual por um supervisor), ou outros tipos de atrasos que não sejam do sistema.</p><p><b>Estratégia 2</b>: meta quantitativa e os passos que contribuem. O objetivo é obter o benefício de ambos. Comece por definir uma meta de desempenho quantitativo (Abordagem 1), e depois identifique os passos que ajudam a alcançá-lo (Abordagem 3). Depois de identificar estes passos, você pode rever o valor da meta de desempenho original para uma descrição informal (Abordagem 2).<br /><br />Se os requisitos estão sendo especificados em dois níveis, ou seja, requisitos de negócio em primeiro lugar e posteriormente requisitos detalhados, a Abordagem 1 se adapta aos requisitos de negócios e a Abordagem 3 os requisitos detalhados.</p><p>Estas duas estratégias não são mutuamente exclusivas: você pode usar a primeira e depois a segunda. Todas estas formas e estratégias têm o seu lugar. Qual é o melhor depende de quão importante é a meta de desempenho, o escopo do sistema a ser especificado (é o único software?), a natureza do seu ambiente de desenvolvimento (o quanto você confia nos seus desenvolvedores para fazer um bom trabalho?), e de preferências pessoais.</p><p>Neste sentido, a lista a seguir descreve o que um requisito de tempo de resposta quantitativamente (pela Abordagem 1) deve conter. </p><ol start=\"1\" type=\"1\"><li><b>Tipo de operação</b>. Ao que este requisito se aplica? É para uma função específica, uma coleção de funções, todas as funções para uma classe de usuários ou algo mais? Não defina requisito de tempo de resposta para todas as funções do usuário; aplicá-lo apenas para aqueles que realmente precisam. Recomenda-se limitar o seu alcance, tanto quanto possível. Exclua funções raramente usadas. Desta forma, use um requisito deste tipo para informar aos desenvolvedores as áreas cujo desempenho eles deverão se preocupar.</li><li><b>Casos excepcionais</b>. Esta meta de tempo de resposta é provável que seja inatingível em algum caso? Por exemplo, não é compatível realizar a medição em funções que envolvem um processamento intenso em relação a um momento em que o sistema apresenta um processamento mais lento. No entanto, é difícil saber em um requisito de tempo de resposta quais as funções demandam trabalho para fazê-los e nós não queremos deixar os desenvolvedores escaparem com desculpas de ineficiência relacionadas a trabalho intenso de processamento. Você deve encontrar o equilíbrio certo.</li><li><b>Limites de tempo</b>. O que exatamente estamos medindo? Isto é, o que fazer quando o cronômetro inicia e o que fazer quando ele parar? Ser preciso, porque as diferenças na interpretação poderia afetar profundamente o quão bem o sistema satisfaz o requisito. Por exemplo, se você está solicitando uma página web (por exemplo, contendo muitas imagens), você está medindo quando a página começa a exibir, quando a sua estrutura principal é exibida, ou quando a página inteira é totalmente exibida (com todas as imagens)?<br /><br />Escolha os limites de tal forma que tudo do início ao fim esteja dentro do escopo do sistema a ser especificado. Excluir tudo sobre o que você não tem controle (como uma rede pública potencialmente lenta). Estabeleça os limites de modo a envolver-se com poucos fatores variáveis. Se você não puder fazer isto, identifique indicativos de <i>hardware</i> ou desempenho assumido (como velocidade de conexão internet) para as peças que estão fora do escopo do sistema que são difíceis de especificar e não se comportam de maneira uniforme. Se você acaba de fixar uma meta para o tempo de resposta do sistema interno, não será diretamente observável por um usuário, então você precisa de um caminho para o software medir e registrar.</li><li><b>Duração do tempo de tolerância</b>. Este é o tempo de resposta máximo aceitável. Normalmente, isso deve ser uma quantidade absoluta (dois segundos, ou meia hora, por exemplo), porque tais valores são tão rápidos e imperceptíveis, assim, são subjetivos e não pode ser verificada de maneira definitiva. (Digo “normalmente” porque em uma ocasião rara, é preferível usar uma medida subjetiva. Tenho em mente a situação em que apenas querem evitar tempos de resposta extremamente lentos, ao invés de insistir em “muito bons”.) É sempre possível substituir um valor subjetivo, escolhendo uma quantidade absoluta para representá-lo. Por exemplo, rápida pode ser definido como menos de um segundo neste contexto, e imperceptível como menos de 1/20 de segundo, de acordo com a taxa de frames por segundo aproximada da vista humano: um piscar de olhos.<br /><br />Se estamos pressionados para incluir fatores fora do âmbito do sistema, uma estratégia alternativa é definir uma unidade de medida para usar como um dado e depois expressar uma meta de desempenho a partir desta unidade. </li><li><b>Justificativa de tempo</b>. Qual a fonte (origem) do tempo de duração tolerável? Isto pode incluir um cálculo e/ou argumento, ou poderia se referir a uma fonte externa, onde a justificativa é dada (como um modelo de dimensionamento). Se a figura é arbitrária, ou você não consegue encontrar uma boa razão para isso, talvez não seja importante.</li><li><b><span lang=\"EN-US\">Indicativo de <i>Hardware set-up</i>.</span></b><span lang=\"EN-US\"></span>Tente usar esta opção se o seu tempo limite vai além do escopo do sistema, especialmente se você está especificando apenas <i>software</i>. Isto deve incluir todos os componentes que afeta o tempo de resposta: máquina do servidor, serviços externos que são chamados, servidor web, <i>firewall</i>, <i>router</i>, redes de comunicações, máquina cliente, e assim por diante. <br />Alternativamente, você pode se referir a uma descrição indicativa de <i>hardware</i> dado em outro lugar.</li><li><b>Ressalva de carga elevada</b>. Quando todo o sistema estiver muito ocupado, tempos de resposta são susceptíveis a degradar. Você não pode ignorar esse fator. Faz sentido uma meta de tempo de resposta ser aplicada somente até uma determinada carga. Não tente prever em que nível de carga ele vai começar a degradar visivelmente, mas você pode definir um nível de atividade (em termos de rendimento ou usuários simultâneos) que o sistema deve ser capaz de lidar e ao mesmo tempo cumprir as metas de tempo de resposta.</li><li><b>Motivação</b> Por que você está especificando essa meta de desempenho? Por que você precisa de um bom tempo de resposta? Pode ser que o usuário possa realizar mais tarefas (um empregado), ou pode ser que ele se entedie e vá para outro lugar (um visitante em um site web casual). A resposta a esta questão pode dar dica de que um requisito de desempenho quantitativo não é a melhor abordagem: talvez você deva reformular um requisito para lidar com a motivação. Por exemplo, a motivação para um <i>download</i> rápido de um <i>software</i> por um visitante da web pode ser para que ele não desista no meio. Uma vez que não é razoável exigir que um <i>download</i> de tamanho desconhecido seja feito em um determinado momento, você pode substituí-lo por um requisito de seja dado ao visitante uma indicação de progresso ou ser suficientemente entretido enquanto o <i>download</i> ocorre. Exibindo uma barra de progresso pode ser suficiente. Você nem sempre precisa declarar a motivação explicitamente no próprio requisito, mas sempre se pergunte qual é.</li></ol>', 'Como especificar requisito que trate de observar o tempo resposta?', 'Especificar quanto tempo o sistema pode demorar para responder a um solicitação.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 36 AS id_insert, 6, 'Capacidade dinâmica', 'Use o padrão de requisito Capacidade dinâmica para especificar a quantidade de um determinado tipo de entidade para a qual o sistema deve ser capaz de realizar processamento, ao mesmo tempo. É destinado principalmente para o número de usuários simultâneos, um sistema deve ser capaz de lidar. Ele também sugere o que fazer para que muitos usuários vêm ao longo de uma vez.', '<p>Especificar capacidade dinâmica é difícil, a menos que tenha um sistema existente a partir do qual você possa obter números. Este tipo de requisito não ajuda muito os desenvolvedores, exceto como uma ideia de escala. Exigir que um sistema seja escalável é muito mais sensato e pode ser feito em vez de exigir um nível especial de capacidade (mais detalhes sobre requisitos relacionados a escalabilidade estão retratados no padrão requisito de escalabilidade). Estes requisitos são mais úteis do que um requisito de capacidade dinâmica ser capaz de exercer controle sobre a carga imposta em seu sistema. Um site está aberto para o mundo inteiro para vir e visitar, mas se mesmo um país pequeno acessou de uma só vez, você enfrentaria problemas a menos que você tenha tomado precauções.<br /><br />Você pode calcular um número esperado de usuários simultâneos usando um modelo de dimensionamento, mas produzir uma estimativa decente é complicado e levanta uma série de cuidados. Você precisa descobrir como um usuário comum se comporta: quando visita, quanto tempo permanece, quais as funções que eles usam (e quantas vezes). Se os usuários estão distribuídos em vários fusos horários, ter em conta o percentual de usuários que residem em cada fuso horário e ajustar os tempos de sua visita à zona do sistema, hora local.</p><p>Assim, um requisito de capacidade dinâmica deve observar os seguintes itens:</p><ol start=\"1\" type=\"1\"><li><b>Tipo de entidade</b>. Porque estamos afirmando capacidade dinâmica? No caso da capacidade de usuários simultâneos, isto é, quer todos os usuários ou apenas uma classe ou mais dos usuários (por exemplo, cliente)? Se duas classes de usuários diferentes se comportam de maneira muito diferentes (ou seja, diferentes níveis de demanda no sistema), recomenda-se tratá-los separadamente, ou então estamos comparando maçãs com laranjas. Para um web site, duas classes fundamentais de usuários podem existir: a externa (clientes e visitantes casuais) e internos (funcionários e, talvez, funcionários de empresas parceiras). Um usuário interno pode impor uma menor carga no sistema (por minuto) do que um usuário externo a quem poderíamos, por exemplo, solicitar o processamento de gráficos pesados. E podemos ter menos usuários internos logados em qualquer momento, embora seja importante para a produtividade do funcionário que o sistema tenha capacidade dinâmica adequada para eles.<br /><br />Observa-se que um requisito de capacidade dinâmica não se preocupa com a duração de sessões de usuário.</li><li><b>Número de entidades</b>. Quanto deve ser o número de entidade em que o sistema possa ser capaz de lidar ao mesmo tempo?</li><li><b>Condição de entidade</b>. O que uma entidade precisa fazer para ser considerada como dinamicamente utilizada pelo sistema? Por exemplo, nós tipicamente contamos os usuários que estão conectados ou utilizando o sistema, ou ambos. Definir precisamente o escopo de usuários que serão afetados pelos requisitos para que outros usuários não pertencentes a este grupo não sejam afetados. Em particular, os usuários podem deixar o sistema sem nos dizer (sair); este é o padrão para os visitantes de web sites. Escreva uma cláusula de condição, excluindo os visitantes que saíram do site na contagem de usuários dinâmicos. </li><li><b>Duração do pico</b> (se relevante). Alguns sistemas têm picos de atividade que duram apenas por um período relativamente curto. Se for o caso, descreva a natureza de tais picos, o que faz com que eles ocorram, quando e por quanto tempo, quais medidas possíveis podem ser tomadas para melhorar o desempenho do sistema enquanto ocorrem esses picos (eliminando processos desnecessários durante este tempo). Se este item é omitido, o sistema deve ser capaz de manter o nível de capacidade o tempo todo em que ele está sendo executado.</li><li><b>Concessões durante o período de pico</b>. Se estivermos especificando um requisito de capacidade dinâmica para um período de pico (ou seja, a duração contínua curta), que concessões em outras áreas (em termos de funcionalidade e/ou performance) podem ser feitas para ajudar a aumentar a capacidade dinâmica?</li><li><b>Prazo de realização.</b> Até quando o sistema deve ser capaz de atender a este nível de capacidade? Se isso não for indicado, é razoável supor que o sistema irá atender a esse nível de capacidade a partir do momento que ele está instalado e para sempre depois disso.</li></ol>', '<p>Como especificar requisitos que tratem da capacidade dinâmica do sistema?</p><p>Como especificar requisitos que observem estimativas decentes sobre capacidade dinâmica do sistema?</p>', 'Especificar a quantidade de um determinado tipo de entidade para a qual o sistema deve ser capaz de realizar processamento, ao mesmo tempo.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 37 AS id_insert, 6, 'Capacidade estática', '<p>Use o padrão de requisito Capacidade estática para especificar a quantidade de um determinado tipo de entidade que o sistema deve ser capaz de armazenar de forma permanente (geralmente em um banco de dados).</p><p>Não usar o padrão de requisito Capacidade estática para especificar por quanto tempo a informação deve ser mantida; usar os dados padrão de requisito para que a longevidade. Também não usá-lo para especificar quanto espaço em disco do sistema de necessidades.</p>', '<p>Com o armazenamento sendo tão barato e bancos de dados capazes de lidar com grandes quantidades de dados, capacidade estática em si não é uma questão crítica: estamos susceptíveis de ter dificuldade em encontrar espaço em disco suficiente para o que precisamos armazenar. A importância de um requisito de capacidade estática é indireta: de modo que todos os aspectos do sistema são projetados e construídos de forma a ser prático e funcional quanto ao número alvo de entidades presentes. Por exemplo, uma consulta ou relatório que mostra todas as pessoas físicas é impraticável se tivermos mais de algumas centenas.</p><p>Neste sentido, um requisito de capacidade estática deve observar:</p><ol start=\"1\" type=\"1\"><li><b>Tipo de entidade</b>. Para que tipo de coisa que estamos garantindo espaço suficiente (por exemplo, cliente)?</li><li><b>Número de entidades</b>. Qual é o número mínimo que o sistema deve ser capaz de armazenar e ainda funcionar bem?</li><li><b>Critérios de inclusão da entidade</b>. Quais entidades contam para efeitos de capacidade? Se este item é omitido, todas as entidades do tipo indicado estão incluídas. O objetivo deste é permitir que as entidades excluídas possam ser removidas (ou movidos para outro lugar, onde têm menos impacto no desempenho). Por exemplo, se incluirmos somente os clientes ativos precisamos indicar com precisão o que isso significa, temos a liberdade para tirar todas as pessoas inativas, se isso vai ajudar a manter o sistema em funcionamento. Isso não quer dizer que as entidades excluídas devem ser removidas; se o sistema funciona bem com elas presentes, não há razão para removê-las ou excluí-las. No entanto, deve haver um requisito para uma função para remover as entidades excluídas (ver padrões de requisito de longevidade de dados e arquivamento de dados). Este item tem o efeito de concessão à equipe de desenvolvimento com um grau de liberdade.</li><li><b>Prazo de realização.</b> Até quando o sistema deve estar pronto para este nível de capacidade? Se for omitido, o sistema deve sempre apoiar essa capacidade.</li></ol>', '<p>Como especificar requisitos que tratem de capacidade de armazenamento?</p>', 'Especificar a quantidade de um determinado tipo de entidade que o sistema deve ser capaz de armazenar de forma permanente.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
            $cordovaSQLite.execute(db, "INSERT INTO padrao (id, id_categoria, nome, objetivo, contexto, problema, forcas) SELECT 38 AS id_insert, 6, 'Rendimento', 'Use o padrão de requisito de Rendimento para especificar uma taxa na qual o sistema ou uma interface entre sistemas em particular, deve ser capaz de executar algum tipo de entrada ou de saída de transformação.', '<p>Infelizmente não é simples escrever requisitos de rendimento satisfatório, por diversas razões. Primeiro, como é que vamos descobrir que taxa de rendimento que precisamos? Segundo, se partes importantes como o <i>hardware</i> e rede estão fora do escopo do sistema, como podemos estabelecer metas de rendimento para o <i>software</i>?</p><p>Antes de elaborar uma meta de rendimento deve-se perguntar: por que isso? Podemos fazer sem uma meta? Para a maioria dos sistemas, ser escalável é mais importante do que alcançar um rendimento fixo. Se os requisitos de escalabilidade forem especificados rigorosamente, muitas vezes podemos evitar todas as especificações relativas a rendimento ou podemos especificar metas de rendimento mais coerentes. No caso de precisar de mais rendimento, podemos ampliar (normalmente pela adição de mais <i>hardware</i>). Se você não tiver uma base sólida para determinar o rendimento, muitas vezes é melhor não tentar, ao invés de apresentar valores sem sentido ou equivocados. </p><p>Recomenda-se não especificar rendimento apenas perguntando às pessoas, deve-se realizar uma análise e depois escrevê-lo. Existem algumas coisas a descobrir, e você provavelmente vai ter que fazer alguns cálculos. Aqui está uma abordagem sugerida:</p><p><b>Etapa 1: Decidir o que medir</b>. Escolha algo que é fundamental para o sistema. Para um sistema de varejo poderia ser novos pedidos (o quanto devemos ser capazes de receber em um determinado momento). Um sistema pode ter vários requisitos de rendimento para as diferentes medidas, mas não se preocupe com atividades secundárias cujos volumes dependem em grande parte em algo que você já escolheu, eles são atendidos pela Etapa 2.</p><p><b>Etapa 2: Trabalhe com outros volumes relativos</b> (se necessário). Elabore fórmulas para trabalhar com volumes relativos em atividades secundárias de interesse no rendimento que buscamos medir (por exemplo, quantas consultas de pedidos). Na realidade, este é um pequeno modelo para volumes relativos, que pode fazer parte de um modelo geral de dimensionamento.</p><p><b>Passo 3: Escolha indicativos de <i>setup</i> de <i>hardware</i></b> (se necessário). Se o <i>hardware</i> está fora do escopo do sistema, definir um <i>setup</i> de <i>hardware</i> para o qual se especifica um rendimento alvo.</p><p><b>Passo 4: Determine uma média de rendimento</b>. Organizações pensam em negócios projetados em termos de prazos relativamente longos: por mês, semana ou talvez por dia. Recomenda-se iniciar os cálculos de rendimento pensando da mesma forma como no negócio, o que nos dá uma vazão média ao longo de um período relativamente longo de tempo.</p><p><b>Passo 5: Determine o pico de rendimento.</b> A carga sobre o sistema não vai ficar constante: uma média de rendimento convenientemente não será entregue a cada minuto ou a cada segundo. Quanto vai variar? Qual o movimento de requisições ou transações ele deve suportar? A resposta da última pergunta que nos dá a meta de rendimento, porque o sistema tem de lidar com o pico de rendimento.</p><p>Uma vez que tenhamos descoberto um alvo de rendimento um requisito para ele precisa conter o seguinte:</p><ol start=\"1\" type=\"1\"><li><b>Tipo de objeto de rendimento</b>. Declarar o tipo, cujo rendimento deve ser medido (como novos pedidos).</li><li><b>Quantidade alvo de rendimento</b> e <b>período de unidade de tempo</b> (por exemplo, 10 por segundo).</li><li><b>A declaração sobre a contingência</b> (se quiser). Em algumas circunstâncias, vale a pena acrescentar um fator de contingência em cima do rendimento estimado (Esse fator é geralmente um percentual, digamos 10 por cento ou 20 por cento.). Se você decidir fazê-lo, indicar o montante de contingência que está incluído no alvo. Normalmente, você aumenta a contingência de acordo com a sua incerteza, mas poderia revelar-se caro aqui (no custo de <i>hardware</i> extra). Se você incluir uma contingência sem dizê-la, a equipe de desenvolvimento pode adicionar sua própria contingência, e ninguém vai saber o que está acontecendo: você pode acabar com um sistema mais robusto ou complexo que o necessário sem perceber. </li><li><b>Parte do sistema</b> (se aplicável). Um requisito de rendimento se aplica tanto para o sistema como um todo ou apenas a uma parte (geralmente uma interface entre sistemas). Se este requisito é para uma parte, diga qual.</li><li><b>Justificativa</b>. De onde vem a meta de rendimento? Como foi calculada? Que valores foram usados como base para o cálculo? Apenas nos casos mais simples uma justificativa independente e concisa é o suficiente; caso contrário, cite em que documento a justificativa pode ser encontrada (ou inclua como material informal na especificação). É bom referir-se a um modelo de dimensionamento.<br /><br />A justificativa pode conter informações confidenciais que você não quer que todos os leitores da especificação de requisitos vejam. Se assim for, deve-se omiti-la a partir da especificação.</li><li><b>Prazo de cumprimento das metas</b>. Pode ser imediatamente após ele ser instalado, depois de um ano ou em algum tempo distante no futuro (“eventualmente”).</li><li><b>Descrição de indicativo de <i>hardware</i></b>(se relevante), ver Etapa 3 da abordagem anterior.</li></ol>', 'Qual a velocidade de rendimento necessária para nosso sistema? Este é o tipo de pergunta mais respondida pelos requisitos de rendimento. Com menor frequência: qual a velocidade de rotatividade necessária para nosso sistema?', 'Especificar uma taxa na qual o sistema ou uma interface entre sistemas em particular, deve ser capaz de executar algum tipo de entrada ou de saída de transformação.' WHERE NOT EXISTS (SELECT p.id FROM padrao p WHERE p.id = id_insert)");
        }
    });
})

app.config(function ($stateProvider, $urlRouterProvider, $ionicConfigProvider) {
    $stateProvider

            .state('app', {
                url: '/app',
                abstract: true,
                templateUrl: 'templates/menu.html',
                controller: 'AppCtrl'
            })

            .state('app.conta', {
                url: '/conta',
                params: {
                    email: null,
                },
                views: {
                    'menuContent': {
                        templateUrl: 'templates/conta.html',
                        controller: 'ContaCtrl'
                    }
                }
            })

            .state('app.login', {
                url: '/login',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/login.html',
                        controller: 'LoginCtrl'
                    }
                }
            })

            .state('app.projetos', {
                url: '/projetos',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projetos.html',
                        controller: 'ProjetoListCtrl'
                    }
                }
            })

            .state('app.projeto-add', {
                url: '/projetos/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-cadastro.html',
                        controller: 'ProjetoCtrl'
                    }
                }
            })

            .state('app.projeto-menu', {
                url: '/projetos/:projetoId',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-menu.html',
                        controller: 'ProjetoMenuCtrl'
                    }
                }
            })

            .state('app.projeto-cadastro', {
                url: '/projetos/:projetoId/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-cadastro.html',
                        controller: 'ProjetoCtrl'
                    }
                }
            })

            .state('app.projeto-interessados', {
                url: '/projetos/:projetoId/interessados',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-interessados.html',
                        controller: 'InteressadoListCtrl'
                    }
                }
            })

            .state('app.projeto-interessados-add', {
                url: '/projetos/:projetoId/interessados/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-interessados-cadastro.html',
                        controller: 'InteressadoCtrl'
                    }
                }
            })

            .state('app.projeto-interessados-cadastro', {
                url: '/projetos/:projetoId/interessados/:interessadoId/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-interessados-cadastro.html',
                        controller: 'InteressadoCtrl'
                    }
                }
            })

            .state('app.projeto-secoes', {
                url: '/projetos/:projetoId/secoes',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-secoes.html',
                        controller: 'SecoesCtrl'
                    }
                }
            })

            .state('app.projeto-requsuario', {
                url: '/projetos/:projetoId/requsuario',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-requsuario.html',
                        controller: 'ReqUsuarioListCtrl'
                    }
                }
            })

            .state('app.projeto-requsuario-add', {
                url: '/projetos/:projetoId/requsuario/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-requsuario-cadastro.html',
                        controller: 'ReqUsuarioCtrl'
                    }
                }
            })

            .state('app.projeto-requsuario-cadastro', {
                url: '/projetos/:projetoId/requsuario/:reqUsuarioId/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-requsuario-cadastro.html',
                        controller: 'ReqUsuarioCtrl'
                    }
                }
            })
            
            .state('app.projeto-reqsistema-funcional', {
                url: '/projetos/:projetoId/reqsistema/funcional',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-reqsistema-funcional.html',
                        controller: 'ReqSistemaFuncionalListCtrl'
                    }
                }
            })
            
            .state('app.projeto-reqsistema-naofuncional', {
                url: '/projetos/:projetoId/reqsistema/naofuncional',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-reqsistema-naofuncional.html',
                        controller: 'ReqSistemaNaoFuncionalListCtrl'
                    }
                }
            })

            .state('app.projeto-reqsistema-add', {
                url: '/projetos/:projetoId/reqsistema/cadastro/:tipoId',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-reqsistema-cadastro.html',
                        controller: 'ReqSistemaCtrl'
                    }
                }
            })

            .state('app.projeto-reqsistema-cadastro', {
                url: '/projetos/:projetoId/reqsistema/:requisitoId/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-reqsistema-cadastro.html',
                        controller: 'ReqSistemaCtrl'
                    }
                }
            })

            .state('app.projeto-rastreabilidade', {
                url: '/projetos/:projetoId/rastreabilidade',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-rastreabilidade.html',
                        controller: 'ProjetoCtrl'
                    }
                }
            })

            .state('app.projeto-participantes', {
                url: '/projetos/:projetoId/participantes',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-participantes.html',
                        controller: 'ParticipanteListCtrl'
                    }
                }
            })

            .state('app.projeto-participantes-add', {
                url: '/projetos/:projetoId/participantes/cadastro',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/projeto-participantes-cadastro.html',
                        controller: 'InteressadoCtrl'
                    }
                }
            })

            .state('app.config', {
                url: '/config',
                views: {
                    'menuContent': {
                        templateUrl: 'templates/config.html',
                        controller: 'ConfigCtrl'
                    }
                }
            })

            ;
    $ionicConfigProvider.navBar.alignTitle('center');
    $urlRouterProvider.otherwise('/app/projetos');
});